{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rh1wVTFAeZEr"
      },
      "source": [
        "Importing the libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "j-z_ZaC8kkq1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.metrics import mean_squared_error"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "PQnn-W4NmfZv"
      },
      "outputs": [
        {
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/content/drive/MyDrive/colab /Sales Prediction Model/laptop_cleaned2.csv'",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "Cell \u001b[1;32mIn[2], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m df\u001b[38;5;241m=\u001b[39m\u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m/content/drive/MyDrive/colab /Sales Prediction Model/laptop_cleaned2.csv\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n",
            "File \u001b[1;32mc:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1026\u001b[0m, in \u001b[0;36mread_csv\u001b[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[0;32m   1013\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[0;32m   1014\u001b[0m     dialect,\n\u001b[0;32m   1015\u001b[0m     delimiter,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1022\u001b[0m     dtype_backend\u001b[38;5;241m=\u001b[39mdtype_backend,\n\u001b[0;32m   1023\u001b[0m )\n\u001b[0;32m   1024\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[1;32m-> 1026\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[1;32mc:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:620\u001b[0m, in \u001b[0;36m_read\u001b[1;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[0;32m    617\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[0;32m    619\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[1;32m--> 620\u001b[0m parser \u001b[38;5;241m=\u001b[39m \u001b[43mTextFileReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    622\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[0;32m    623\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
            "File \u001b[1;32mc:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1620\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[1;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[0;32m   1617\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m   1619\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1620\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[1;32mc:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1880\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[1;34m(self, f, engine)\u001b[0m\n\u001b[0;32m   1878\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[0;32m   1879\u001b[0m         mode \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m-> 1880\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m   1881\u001b[0m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1882\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1883\u001b[0m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1884\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcompression\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1885\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmemory_map\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1886\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1887\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding_errors\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstrict\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1888\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstorage_options\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m   1889\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1890\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m   1891\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n",
            "File \u001b[1;32mc:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\pandas\\io\\common.py:873\u001b[0m, in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[0;32m    868\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[0;32m    869\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[0;32m    870\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[0;32m    871\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[0;32m    872\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[1;32m--> 873\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[0;32m    874\u001b[0m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    875\u001b[0m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    876\u001b[0m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    877\u001b[0m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    878\u001b[0m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m    879\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    880\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    881\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[0;32m    882\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n",
            "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/colab /Sales Prediction Model/laptop_cleaned2.csv'"
          ]
        }
      ],
      "source": [
        "df = pd.read_csv(\"C:\\Users\\Lenovo\\OneDrive\\Desktop\\Banu Docs\\laptop_cleaned2.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 808
        },
        "id": "pl0l2uQCehz_",
        "outputId": "7ff7b7ff-d853-4923-d56a-56829e665d03"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-d5ffa8d8-e661-4986-98df-91f082909ecf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Name</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Processor_brand</th>\n",
              "      <th>Processor_name</th>\n",
              "      <th>Processor_variant</th>\n",
              "      <th>Processor_gen</th>\n",
              "      <th>Core_per_processor</th>\n",
              "      <th>...</th>\n",
              "      <th>Graphics_name</th>\n",
              "      <th>Graphics_brand</th>\n",
              "      <th>Graphics_GB</th>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <th>Display_size_inches</th>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <th>ppi</th>\n",
              "      <th>Touch_screen</th>\n",
              "      <th>Operating_system</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>HP Victus 15-fb0157AX Gaming Laptop (AMD Ryzen...</td>\n",
              "      <td>HP</td>\n",
              "      <td>50399</td>\n",
              "      <td>4.30</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>5600H</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon RX 6500M</td>\n",
              "      <td>AMD</td>\n",
              "      <td>4.0</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>True</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Lenovo V15 G4 ‎82YU00W7IN Laptop (AMD Ryzen 3 ...</td>\n",
              "      <td>Lenovo</td>\n",
              "      <td>26690</td>\n",
              "      <td>4.45</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 3</td>\n",
              "      <td>7320U</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon Graphics</td>\n",
              "      <td>AMD</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>HP 15s-fq5007TU Laptop (12th Gen Core i3/ 8GB/...</td>\n",
              "      <td>HP</td>\n",
              "      <td>37012</td>\n",
              "      <td>4.65</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i3</td>\n",
              "      <td>1215U</td>\n",
              "      <td>12.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel UHD Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Samsung Galaxy Book2 Pro 13 Laptop (12th Gen C...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>69990</td>\n",
              "      <td>4.75</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i5</td>\n",
              "      <td>1240P</td>\n",
              "      <td>12.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel Iris Xe Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>13.3</td>\n",
              "      <td>1080</td>\n",
              "      <td>1920</td>\n",
              "      <td>165.63</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Tecno Megabook T1 Laptop (11th Gen Core i3/ 8G...</td>\n",
              "      <td>Tecno</td>\n",
              "      <td>23990</td>\n",
              "      <td>4.25</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i3</td>\n",
              "      <td>1115G4</td>\n",
              "      <td>11.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel UHD Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1015</th>\n",
              "      <td>1015</td>\n",
              "      <td>MSI Creator Z17 HX Studio A13V Laptop</td>\n",
              "      <td>MSI</td>\n",
              "      <td>247999</td>\n",
              "      <td>4.45</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i9</td>\n",
              "      <td>13900H</td>\n",
              "      <td>13.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NVIDIA GeForce RTX 4070</td>\n",
              "      <td>NVIDIA</td>\n",
              "      <td>8.0</td>\n",
              "      <td>False</td>\n",
              "      <td>17.0</td>\n",
              "      <td>2560</td>\n",
              "      <td>1600</td>\n",
              "      <td>177.58</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1016</th>\n",
              "      <td>1016</td>\n",
              "      <td>MSI Stealth 16 Mercedes AMG Motorsport A13V Ga...</td>\n",
              "      <td>MSI</td>\n",
              "      <td>292990</td>\n",
              "      <td>4.20</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i9</td>\n",
              "      <td>13900H</td>\n",
              "      <td>13.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NVIDIA GeForce RTX 4070</td>\n",
              "      <td>NVIDIA</td>\n",
              "      <td>8.0</td>\n",
              "      <td>False</td>\n",
              "      <td>16.0</td>\n",
              "      <td>3840</td>\n",
              "      <td>2400</td>\n",
              "      <td>283.02</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017</th>\n",
              "      <td>1017</td>\n",
              "      <td>HP Victus 15-fb0131AX Gaming Laptop (AMD Ryzen...</td>\n",
              "      <td>HP</td>\n",
              "      <td>58800</td>\n",
              "      <td>4.40</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>5600H</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon RX 5600M</td>\n",
              "      <td>AMD</td>\n",
              "      <td>4.0</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1018</th>\n",
              "      <td>1018</td>\n",
              "      <td>Asus Vivobook 16 2023 M1605YA-MB521WS Laptop (...</td>\n",
              "      <td>Asus</td>\n",
              "      <td>54999</td>\n",
              "      <td>4.25</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>7530U</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon AMD</td>\n",
              "      <td>AMD</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1920</td>\n",
              "      <td>1200</td>\n",
              "      <td>141.51</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1019</th>\n",
              "      <td>1019</td>\n",
              "      <td>Dell Inspiron 7630 IC7630GHHRH001ORS1 2 in 1 L...</td>\n",
              "      <td>Dell</td>\n",
              "      <td>94490</td>\n",
              "      <td>4.05</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i5</td>\n",
              "      <td>1335U</td>\n",
              "      <td>13.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel Iris Xe Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1920</td>\n",
              "      <td>1200</td>\n",
              "      <td>141.51</td>\n",
              "      <td>True</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1020 rows × 29 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5ffa8d8-e661-4986-98df-91f082909ecf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d5ffa8d8-e661-4986-98df-91f082909ecf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d5ffa8d8-e661-4986-98df-91f082909ecf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c5b040e4-2850-4309-944c-5369c47bf713\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c5b040e4-2850-4309-944c-5369c47bf713')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c5b040e4-2850-4309-944c-5369c47bf713 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2000f154-4a74-4dca-a1a2-6899c52bfdef\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2000f154-4a74-4dca-a1a2-6899c52bfdef button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      Unnamed: 0                                               Name    Brand  \\\n",
              "0              0  HP Victus 15-fb0157AX Gaming Laptop (AMD Ryzen...       HP   \n",
              "1              1  Lenovo V15 G4 ‎82YU00W7IN Laptop (AMD Ryzen 3 ...   Lenovo   \n",
              "2              2  HP 15s-fq5007TU Laptop (12th Gen Core i3/ 8GB/...       HP   \n",
              "3              3  Samsung Galaxy Book2 Pro 13 Laptop (12th Gen C...  Samsung   \n",
              "4              4  Tecno Megabook T1 Laptop (11th Gen Core i3/ 8G...    Tecno   \n",
              "...          ...                                                ...      ...   \n",
              "1015        1015              MSI Creator Z17 HX Studio A13V Laptop      MSI   \n",
              "1016        1016  MSI Stealth 16 Mercedes AMG Motorsport A13V Ga...      MSI   \n",
              "1017        1017  HP Victus 15-fb0131AX Gaming Laptop (AMD Ryzen...       HP   \n",
              "1018        1018  Asus Vivobook 16 2023 M1605YA-MB521WS Laptop (...     Asus   \n",
              "1019        1019  Dell Inspiron 7630 IC7630GHHRH001ORS1 2 in 1 L...     Dell   \n",
              "\n",
              "       Price  Rating Processor_brand Processor_name Processor_variant  \\\n",
              "0      50399    4.30             AMD    AMD Ryzen 5             5600H   \n",
              "1      26690    4.45             AMD    AMD Ryzen 3             7320U   \n",
              "2      37012    4.65           Intel  Intel Core i3             1215U   \n",
              "3      69990    4.75           Intel  Intel Core i5             1240P   \n",
              "4      23990    4.25           Intel  Intel Core i3            1115G4   \n",
              "...      ...     ...             ...            ...               ...   \n",
              "1015  247999    4.45           Intel  Intel Core i9            13900H   \n",
              "1016  292990    4.20           Intel  Intel Core i9            13900H   \n",
              "1017   58800    4.40             AMD    AMD Ryzen 5             5600H   \n",
              "1018   54999    4.25             AMD    AMD Ryzen 5             7530U   \n",
              "1019   94490    4.05           Intel  Intel Core i5             1335U   \n",
              "\n",
              "      Processor_gen  Core_per_processor  ...            Graphics_name  \\\n",
              "0               5.0                 6.0  ...      AMD Radeon RX 6500M   \n",
              "1               7.0                 4.0  ...      AMD Radeon Graphics   \n",
              "2              12.0                 6.0  ...       Intel UHD Graphics   \n",
              "3              12.0                12.0  ...   Intel Iris Xe Graphics   \n",
              "4              11.0                 2.0  ...       Intel UHD Graphics   \n",
              "...             ...                 ...  ...                      ...   \n",
              "1015           13.0                14.0  ...  NVIDIA GeForce RTX 4070   \n",
              "1016           13.0                14.0  ...  NVIDIA GeForce RTX 4070   \n",
              "1017            5.0                 6.0  ...      AMD Radeon RX 5600M   \n",
              "1018            7.0                 6.0  ...           AMD Radeon AMD   \n",
              "1019           13.0                10.0  ...   Intel Iris Xe Graphics   \n",
              "\n",
              "      Graphics_brand  Graphics_GB  Graphics_integreted  Display_size_inches  \\\n",
              "0                AMD          4.0                False                 15.6   \n",
              "1                AMD          NaN                False                 15.6   \n",
              "2              Intel          NaN                False                 15.6   \n",
              "3              Intel          NaN                False                 13.3   \n",
              "4              Intel          NaN                False                 15.6   \n",
              "...              ...          ...                  ...                  ...   \n",
              "1015          NVIDIA          8.0                False                 17.0   \n",
              "1016          NVIDIA          8.0                False                 16.0   \n",
              "1017             AMD          4.0                False                 15.6   \n",
              "1018             AMD          NaN                False                 16.0   \n",
              "1019           Intel          NaN                False                 16.0   \n",
              "\n",
              "      Horizontal_pixel Vertical_pixel     ppi Touch_screen Operating_system  \n",
              "0                 1920           1080  141.21         True    Windows 11 OS  \n",
              "1                 1920           1080  141.21        False    Windows 11 OS  \n",
              "2                 1920           1080  141.21        False    Windows 11 OS  \n",
              "3                 1080           1920  165.63        False    Windows 11 OS  \n",
              "4                 1920           1080  141.21        False    Windows 11 OS  \n",
              "...                ...            ...     ...          ...              ...  \n",
              "1015              2560           1600  177.58        False    Windows 11 OS  \n",
              "1016              3840           2400  283.02        False    Windows 11 OS  \n",
              "1017              1920           1080  141.21        False    Windows 11 OS  \n",
              "1018              1920           1200  141.51        False    Windows 11 OS  \n",
              "1019              1920           1200  141.51         True    Windows 11 OS  \n",
              "\n",
              "[1020 rows x 29 columns]"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "iRSEtChsmpEu"
      },
      "outputs": [],
      "source": [
        "df.drop(\"Unnamed: 0\",axis=1,inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 962
        },
        "id": "Qsni_yULmqNJ",
        "outputId": "174317bf-f043-4159-82dc-3441cc44a466"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_variant</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_gen</th>\n",
              "      <td>129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Core_per_processor</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total_processor</th>\n",
              "      <td>447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Execution_units</th>\n",
              "      <td>447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low_Power_Cores</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Energy_Efficient_Units</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Threads</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_GB</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_type</th>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_capacity_GB</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_name</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_brand</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_GB</th>\n",
              "      <td>652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Display_size_inches</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ppi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Touch_screen</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operating_system</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ],
            "text/plain": [
              "Name                        0\n",
              "Brand                       0\n",
              "Price                       0\n",
              "Rating                      0\n",
              "Processor_brand             0\n",
              "Processor_name              0\n",
              "Processor_variant          24\n",
              "Processor_gen             129\n",
              "Core_per_processor         12\n",
              "Total_processor           447\n",
              "Execution_units           447\n",
              "Low_Power_Cores             0\n",
              "Energy_Efficient_Units      0\n",
              "Threads                    48\n",
              "RAM_GB                      0\n",
              "RAM_type                   22\n",
              "Storage_capacity_GB         0\n",
              "Storage_type                0\n",
              "Graphics_name               2\n",
              "Graphics_brand              2\n",
              "Graphics_GB               652\n",
              "Graphics_integreted         2\n",
              "Display_size_inches         0\n",
              "Horizontal_pixel            0\n",
              "Vertical_pixel              0\n",
              "ppi                         0\n",
              "Touch_screen                0\n",
              "Operating_system            0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qDjtzixX-Yp8",
        "outputId": "651542b4-5808-4362-9381-fef803413f64"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(1020, 28)"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "6iwbx_4emwrr",
        "outputId": "53b5de51-046e-4567-d913-53897d28f212"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'HP 15s-fq5111TU Laptop (12th Gen Core i5/ 8GB/ 512GB SSD/ Win11 Home)'"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[\"Name\"][555]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "69oAsNWte3WP"
      },
      "source": [
        "Feature Selections"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "IMi1LvMA_JKX"
      },
      "outputs": [],
      "source": [
        "df.drop([\"Graphics_GB\",\"Total_processor\",\"Execution_units\",\"Processor_gen\"],axis=1,inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ruvjsxgmvtwq",
        "outputId": "67557078-9c1b-4ae5-c726-b02d7fbc5ffb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(1020, 24)"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5YlBOxdoY5Ml"
      },
      "source": [
        "Storing columns with datatype as object\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "Es7sc4e-eTYT"
      },
      "outputs": [],
      "source": [
        "obj_col = df.select_dtypes(include=\"object\").columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "YXe8hm0FzzXI",
        "outputId": "1c88452e-3380-49d2-913c-540674defea8"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_variant</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Core_per_processor</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low_Power_Cores</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Energy_Efficient_Units</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Threads</th>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_GB</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_type</th>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_capacity_GB</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_name</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_brand</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Display_size_inches</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ppi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Touch_screen</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operating_system</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ],
            "text/plain": [
              "Name                       0\n",
              "Brand                      0\n",
              "Price                      0\n",
              "Rating                     0\n",
              "Processor_brand            0\n",
              "Processor_name             0\n",
              "Processor_variant         24\n",
              "Core_per_processor        12\n",
              "Low_Power_Cores            0\n",
              "Energy_Efficient_Units     0\n",
              "Threads                   48\n",
              "RAM_GB                     0\n",
              "RAM_type                  22\n",
              "Storage_capacity_GB        0\n",
              "Storage_type               0\n",
              "Graphics_name              2\n",
              "Graphics_brand             2\n",
              "Graphics_integreted        2\n",
              "Display_size_inches        0\n",
              "Horizontal_pixel           0\n",
              "Vertical_pixel             0\n",
              "ppi                        0\n",
              "Touch_screen               0\n",
              "Operating_system           0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "sesPyr3nDSoh"
      },
      "outputs": [],
      "source": [
        "null_col = df.columns[df.isnull().any()].tolist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "pKSKKLjQwzLF"
      },
      "outputs": [],
      "source": [
        "from sklearn.impute import SimpleImputer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "o9bRF59G16Nb"
      },
      "outputs": [],
      "source": [
        "col = list(df.columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "pbFconNK_A1F",
        "outputId": "99cd00a8-8f17-4342-9dd6-6e7e6bf16424"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rating</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_variant</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Core_per_processor</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low_Power_Cores</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Energy_Efficient_Units</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Threads</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_GB</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_capacity_GB</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Display_size_inches</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ppi</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Touch_screen</th>\n",
              "      <td>bool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operating_system</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ],
            "text/plain": [
              "Name                       object\n",
              "Brand                      object\n",
              "Price                       int64\n",
              "Rating                    float64\n",
              "Processor_brand            object\n",
              "Processor_name             object\n",
              "Processor_variant          object\n",
              "Core_per_processor        float64\n",
              "Low_Power_Cores           float64\n",
              "Energy_Efficient_Units      int64\n",
              "Threads                   float64\n",
              "RAM_GB                      int64\n",
              "RAM_type                   object\n",
              "Storage_capacity_GB         int64\n",
              "Storage_type               object\n",
              "Graphics_name              object\n",
              "Graphics_brand             object\n",
              "Graphics_integreted        object\n",
              "Display_size_inches       float64\n",
              "Horizontal_pixel            int64\n",
              "Vertical_pixel              int64\n",
              "ppi                       float64\n",
              "Touch_screen                 bool\n",
              "Operating_system           object\n",
              "dtype: object"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PwEbOZZ3Zhi3"
      },
      "source": [
        "Using Simple Imputer to fill the null values and managing also the datatype"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bYnjqs0Y_ek7",
        "outputId": "c5646bec-bb9a-4246-ce8e-08382bd4db93"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['Processor_variant',\n",
              " 'Core_per_processor',\n",
              " 'Threads',\n",
              " 'RAM_type',\n",
              " 'Graphics_name',\n",
              " 'Graphics_brand',\n",
              " 'Graphics_integreted']"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "null_col"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "FJNpAPAGyUx3"
      },
      "outputs": [],
      "source": [
        "si = SimpleImputer(strategy=\"most_frequent\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "9ITqED4MFfX3"
      },
      "outputs": [],
      "source": [
        "float_null = list(df[null_col].select_dtypes(exclude=\"object\"))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "PG6mQhDS2iyg"
      },
      "outputs": [],
      "source": [
        "df_si = si.fit_transform(df[null_col])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o1Z5DRLpDGXx",
        "outputId": "eaedf42b-3f41-453c-caaa-cc5b1346ab0d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(1020, 7)"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_si.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "NCf5U9vB5ye-"
      },
      "outputs": [],
      "source": [
        "df_si=pd.DataFrame(df_si,columns=null_col)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "7M-3F7xdGp_S"
      },
      "outputs": [],
      "source": [
        "for i in float_null:\n",
        "  df_si[i]=df_si[i].astype('float64')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "545w3dDXEz5i",
        "outputId": "c7ebe5f4-b582-4482-b4a3-d6caae07de0b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Processor_variant</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Core_per_processor</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Threads</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ],
            "text/plain": [
              "Processor_variant       object\n",
              "Core_per_processor     float64\n",
              "Threads                float64\n",
              "RAM_type                object\n",
              "Graphics_name           object\n",
              "Graphics_brand          object\n",
              "Graphics_integreted     object\n",
              "dtype: object"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_si.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "LogdBS3JDkvd"
      },
      "outputs": [],
      "source": [
        "for i in null_col:\n",
        "  df[i] = df_si[i]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "WMxoOgo52sAj",
        "outputId": "ad4a368c-ba90-4acd-c255-bfd7936f249e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_variant</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Core_per_processor</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low_Power_Cores</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Energy_Efficient_Units</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Threads</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_GB</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_capacity_GB</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Display_size_inches</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ppi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Touch_screen</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operating_system</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ],
            "text/plain": [
              "Name                      0\n",
              "Brand                     0\n",
              "Price                     0\n",
              "Rating                    0\n",
              "Processor_brand           0\n",
              "Processor_name            0\n",
              "Processor_variant         0\n",
              "Core_per_processor        0\n",
              "Low_Power_Cores           0\n",
              "Energy_Efficient_Units    0\n",
              "Threads                   0\n",
              "RAM_GB                    0\n",
              "RAM_type                  0\n",
              "Storage_capacity_GB       0\n",
              "Storage_type              0\n",
              "Graphics_name             0\n",
              "Graphics_brand            0\n",
              "Graphics_integreted       0\n",
              "Display_size_inches       0\n",
              "Horizontal_pixel          0\n",
              "Vertical_pixel            0\n",
              "ppi                       0\n",
              "Touch_screen              0\n",
              "Operating_system          0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "D1mYuoer52Px",
        "outputId": "33d0d02d-7b7a-4ad3-bc36-7de91be94fd2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rating</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_variant</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Core_per_processor</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low_Power_Cores</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Energy_Efficient_Units</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Threads</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_GB</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_capacity_GB</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Display_size_inches</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ppi</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Touch_screen</th>\n",
              "      <td>bool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operating_system</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ],
            "text/plain": [
              "Name                       object\n",
              "Brand                      object\n",
              "Price                       int64\n",
              "Rating                    float64\n",
              "Processor_brand            object\n",
              "Processor_name             object\n",
              "Processor_variant          object\n",
              "Core_per_processor        float64\n",
              "Low_Power_Cores           float64\n",
              "Energy_Efficient_Units      int64\n",
              "Threads                   float64\n",
              "RAM_GB                      int64\n",
              "RAM_type                   object\n",
              "Storage_capacity_GB         int64\n",
              "Storage_type               object\n",
              "Graphics_name              object\n",
              "Graphics_brand             object\n",
              "Graphics_integreted        object\n",
              "Display_size_inches       float64\n",
              "Horizontal_pixel            int64\n",
              "Vertical_pixel              int64\n",
              "ppi                       float64\n",
              "Touch_screen                 bool\n",
              "Operating_system           object\n",
              "dtype: object"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F_e3wvBzaHm1"
      },
      "source": [
        "Generating a dummy column i.e Sales_vol(Target Column)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "nr4zizrA57sR"
      },
      "outputs": [],
      "source": [
        "np.random.seed(42)\n",
        "df[\"Sales_vol\"] = (1000 / (df[\"Price\"] + 1)) * (1 + df[\"Rating\"] / 5)+np.random.randint(0,2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "Ihw64HmLw1ai",
        "outputId": "8775951a-d7a7-4004-f4e9-958b553d1fd7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: xlabel='Sales_vol', ylabel='Count'>"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.histplot(df[\"Sales_vol\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "g3YN9w-Hw5aZ"
      },
      "outputs": [],
      "source": [
        "# sns.heatmap(df[list(df.dtypes(exclude=\"object\"))].corr(),annot=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "X40kFtOiu4e_"
      },
      "outputs": [],
      "source": [
        "Y = df[\"Sales_vol\"]\n",
        "X = df.drop(\"Sales_vol\",axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TIJThco4abiT"
      },
      "source": [
        "Converting Categorical column to numerical using One Hot Encoding"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "WefgYc8-xnn3"
      },
      "outputs": [],
      "source": [
        "ohe = OneHotEncoder(sparse_output=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fn-uMrvBH9Op",
        "outputId": "4b18c29c-ab37-4519-dc56-0b337be15da9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['Rating',\n",
              " 'Core_per_processor',\n",
              " 'Low_Power_Cores',\n",
              " 'Threads',\n",
              " 'Display_size_inches',\n",
              " 'ppi']"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "list(X.select_dtypes(include=\"float\").columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "MmTlQhiytDJz"
      },
      "outputs": [],
      "source": [
        "col = list(X.select_dtypes(include=\"object\").columns)\n",
        "float_columns = list(X.select_dtypes(include=\"float\").columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "x6q78XWDsy21"
      },
      "outputs": [],
      "source": [
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('cat', OneHotEncoder(sparse_output=False), col),\n",
        "        ('num', 'passthrough', float_columns)\n",
        "    ]\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "YYnY_Nal1V6p"
      },
      "outputs": [],
      "source": [
        "transformed_data = preprocessor.fit_transform(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MpAh5KWYrjlU",
        "outputId": "23949ff1-e5d1-4094-8341-826492e5b300"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['Price',\n",
              " 'Rating',\n",
              " 'Core_per_processor',\n",
              " 'Low_Power_Cores',\n",
              " 'Energy_Efficient_Units',\n",
              " 'Threads',\n",
              " 'RAM_GB',\n",
              " 'Storage_capacity_GB',\n",
              " 'Display_size_inches',\n",
              " 'Horizontal_pixel',\n",
              " 'Vertical_pixel',\n",
              " 'ppi',\n",
              " 'Touch_screen']"
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "list(X.select_dtypes(exclude=\"object\").columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 868
        },
        "id": "pL5je8se1YUp",
        "outputId": "d8aeedec-d716-4e16-e6b6-d982c7b74f43"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rating</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor_variant</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Core_per_processor</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low_Power_Cores</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Energy_Efficient_Units</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Threads</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_GB</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM_type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_capacity_GB</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage_type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_brand</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Display_size_inches</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ppi</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Touch_screen</th>\n",
              "      <td>bool</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operating_system</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sales_vol</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ],
            "text/plain": [
              "Name                       object\n",
              "Brand                      object\n",
              "Price                       int64\n",
              "Rating                    float64\n",
              "Processor_brand            object\n",
              "Processor_name             object\n",
              "Processor_variant          object\n",
              "Core_per_processor        float64\n",
              "Low_Power_Cores           float64\n",
              "Energy_Efficient_Units      int64\n",
              "Threads                   float64\n",
              "RAM_GB                      int64\n",
              "RAM_type                   object\n",
              "Storage_capacity_GB         int64\n",
              "Storage_type               object\n",
              "Graphics_name              object\n",
              "Graphics_brand             object\n",
              "Graphics_integreted        object\n",
              "Display_size_inches       float64\n",
              "Horizontal_pixel            int64\n",
              "Vertical_pixel              int64\n",
              "ppi                       float64\n",
              "Touch_screen                 bool\n",
              "Operating_system           object\n",
              "Sales_vol                 float64\n",
              "dtype: object"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-n5PLN61eC9o",
        "outputId": "d5f1d9dc-d5dd-45eb-fbbf-3b0066a0d56e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[  0.  ,   0.  ,   0.  , ...,  12.  ,  15.6 , 141.21],\n",
              "       [  0.  ,   0.  ,   0.  , ...,   8.  ,  15.6 , 141.21],\n",
              "       [  0.  ,   0.  ,   0.  , ...,   8.  ,  15.6 , 141.21],\n",
              "       ...,\n",
              "       [  0.  ,   0.  ,   0.  , ...,  12.  ,  15.6 , 141.21],\n",
              "       [  0.  ,   0.  ,   0.  , ...,  12.  ,  16.  , 141.51],\n",
              "       [  0.  ,   0.  ,   0.  , ...,  12.  ,  16.  , 141.51]])"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "transformed_data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QgXn13_kaobi"
      },
      "source": [
        "Splitting the dataset into train and test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "qqCF7EptfCBx"
      },
      "outputs": [],
      "source": [
        "x_train,x_test,y_train,y_test = train_test_split(transformed_data,Y,test_size=0.2,random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ujgOD4cuatSC"
      },
      "source": [
        "Using XGBRegressor to train the model , Setting early stopping to prevent overfitting"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "UiOi36sVZcca",
        "outputId": "4b912709-efeb-4fb3-a30a-77af09a6009c"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=10,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=1000, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;XGBRegressor<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=10,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=1000, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
            ],
            "text/plain": [
              "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=10,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=1000, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=None, ...)"
            ]
          },
          "execution_count": 41,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model = XGBRegressor(n_estimators=1000, early_stopping_rounds=10)\n",
        "model.fit(x_train, y_train, eval_set=[(x_test, y_test)], verbose=False)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "Fzktn4DnJEAI"
      },
      "outputs": [],
      "source": [
        "y_pred = model.predict(x_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MbjLNwIKbync"
      },
      "source": [
        "Checking the accuracy of the model using root mean square"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "s-yWuUULJa3v"
      },
      "outputs": [],
      "source": [
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = np.sqrt(mse)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ffHggrdJdjQG"
      },
      "source": [
        "Checking for overfitting by comparing the accuracy on x_train and x_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mSNkjfhVJi03",
        "outputId": "163d5570-377e-491c-f73a-34a9a93e4fab"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "RMSE: 0.008524002989227694\n"
          ]
        }
      ],
      "source": [
        "print(\"RMSE:\", rmse)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sdNFEegVYxaS",
        "outputId": "7cd7ef25-85d3-4c2d-b7eb-519887283918"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.003672159751051342"
            ]
          },
          "execution_count": 45,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.sqrt(mean_squared_error(y_train,model.predict(x_train)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "T8MB6dr4qhXT"
      },
      "outputs": [],
      "source": [
        "company = []\n",
        "for i in range(df.shape[0]):\n",
        "    company.append(df[\"Name\"][i].split()[0])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "aQQSZIcxqiSN"
      },
      "outputs": [],
      "source": [
        "company = pd.DataFrame(company)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "aS_w2IA2o8Eh"
      },
      "outputs": [],
      "source": [
        "df['Brand'] = company[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "id": "b-wON1lia4aT",
        "outputId": "b6916258-6532-4f00-a920-ee55923869cd"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-99e04bb9-f27e-4f3f-8c8c-2a47170b1cdd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Price</th>\n",
              "      <th>Rating</th>\n",
              "      <th>Processor_brand</th>\n",
              "      <th>Processor_name</th>\n",
              "      <th>Processor_variant</th>\n",
              "      <th>Core_per_processor</th>\n",
              "      <th>Low_Power_Cores</th>\n",
              "      <th>Energy_Efficient_Units</th>\n",
              "      <th>...</th>\n",
              "      <th>Graphics_name</th>\n",
              "      <th>Graphics_brand</th>\n",
              "      <th>Graphics_integreted</th>\n",
              "      <th>Display_size_inches</th>\n",
              "      <th>Horizontal_pixel</th>\n",
              "      <th>Vertical_pixel</th>\n",
              "      <th>ppi</th>\n",
              "      <th>Touch_screen</th>\n",
              "      <th>Operating_system</th>\n",
              "      <th>Sales_vol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HP Victus 15-fb0157AX Gaming Laptop (AMD Ryzen...</td>\n",
              "      <td>HP</td>\n",
              "      <td>50399</td>\n",
              "      <td>4.30</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>5600H</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon RX 6500M</td>\n",
              "      <td>AMD</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>True</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.036905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Lenovo V15 G4 ‎82YU00W7IN Laptop (AMD Ryzen 3 ...</td>\n",
              "      <td>Lenovo</td>\n",
              "      <td>26690</td>\n",
              "      <td>4.45</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 3</td>\n",
              "      <td>7320U</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon Graphics</td>\n",
              "      <td>AMD</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.070810</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HP 15s-fq5007TU Laptop (12th Gen Core i3/ 8GB/...</td>\n",
              "      <td>HP</td>\n",
              "      <td>37012</td>\n",
              "      <td>4.65</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i3</td>\n",
              "      <td>1215U</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel UHD Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.052144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Samsung Galaxy Book2 Pro 13 Laptop (12th Gen C...</td>\n",
              "      <td>Samsung</td>\n",
              "      <td>69990</td>\n",
              "      <td>4.75</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i5</td>\n",
              "      <td>1240P</td>\n",
              "      <td>12.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel Iris Xe Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>False</td>\n",
              "      <td>13.3</td>\n",
              "      <td>1080</td>\n",
              "      <td>1920</td>\n",
              "      <td>165.63</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.027861</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Tecno Megabook T1 Laptop (11th Gen Core i3/ 8G...</td>\n",
              "      <td>Tecno</td>\n",
              "      <td>23990</td>\n",
              "      <td>4.25</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i3</td>\n",
              "      <td>1115G4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel UHD Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.077112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1015</th>\n",
              "      <td>MSI Creator Z17 HX Studio A13V Laptop</td>\n",
              "      <td>MSI</td>\n",
              "      <td>247999</td>\n",
              "      <td>4.45</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i9</td>\n",
              "      <td>13900H</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NVIDIA GeForce RTX 4070</td>\n",
              "      <td>NVIDIA</td>\n",
              "      <td>False</td>\n",
              "      <td>17.0</td>\n",
              "      <td>2560</td>\n",
              "      <td>1600</td>\n",
              "      <td>177.58</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.007621</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1016</th>\n",
              "      <td>MSI Stealth 16 Mercedes AMG Motorsport A13V Ga...</td>\n",
              "      <td>MSI</td>\n",
              "      <td>292990</td>\n",
              "      <td>4.20</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i9</td>\n",
              "      <td>13900H</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NVIDIA GeForce RTX 4070</td>\n",
              "      <td>NVIDIA</td>\n",
              "      <td>False</td>\n",
              "      <td>16.0</td>\n",
              "      <td>3840</td>\n",
              "      <td>2400</td>\n",
              "      <td>283.02</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.006280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1017</th>\n",
              "      <td>HP Victus 15-fb0131AX Gaming Laptop (AMD Ryzen...</td>\n",
              "      <td>HP</td>\n",
              "      <td>58800</td>\n",
              "      <td>4.40</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>5600H</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon RX 5600M</td>\n",
              "      <td>AMD</td>\n",
              "      <td>False</td>\n",
              "      <td>15.6</td>\n",
              "      <td>1920</td>\n",
              "      <td>1080</td>\n",
              "      <td>141.21</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.031972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1018</th>\n",
              "      <td>Asus Vivobook 16 2023 M1605YA-MB521WS Laptop (...</td>\n",
              "      <td>Asus</td>\n",
              "      <td>54999</td>\n",
              "      <td>4.25</td>\n",
              "      <td>AMD</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>7530U</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>AMD Radeon AMD</td>\n",
              "      <td>AMD</td>\n",
              "      <td>False</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1920</td>\n",
              "      <td>1200</td>\n",
              "      <td>141.51</td>\n",
              "      <td>False</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.033636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1019</th>\n",
              "      <td>Dell Inspiron 7630 IC7630GHHRH001ORS1 2 in 1 L...</td>\n",
              "      <td>Dell</td>\n",
              "      <td>94490</td>\n",
              "      <td>4.05</td>\n",
              "      <td>Intel</td>\n",
              "      <td>Intel Core i5</td>\n",
              "      <td>1335U</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>Intel Iris Xe Graphics</td>\n",
              "      <td>Intel</td>\n",
              "      <td>False</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1920</td>\n",
              "      <td>1200</td>\n",
              "      <td>141.51</td>\n",
              "      <td>True</td>\n",
              "      <td>Windows 11 OS</td>\n",
              "      <td>0.019155</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1020 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99e04bb9-f27e-4f3f-8c8c-2a47170b1cdd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-99e04bb9-f27e-4f3f-8c8c-2a47170b1cdd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-99e04bb9-f27e-4f3f-8c8c-2a47170b1cdd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-26be3624-a91a-46e3-8c1b-f0231a290c4b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26be3624-a91a-46e3-8c1b-f0231a290c4b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-26be3624-a91a-46e3-8c1b-f0231a290c4b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_95425292-5d44-4f8b-bfbe-177d7db18ad8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_95425292-5d44-4f8b-bfbe-177d7db18ad8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                                                   Name    Brand   Price  \\\n",
              "0     HP Victus 15-fb0157AX Gaming Laptop (AMD Ryzen...       HP   50399   \n",
              "1     Lenovo V15 G4 ‎82YU00W7IN Laptop (AMD Ryzen 3 ...   Lenovo   26690   \n",
              "2     HP 15s-fq5007TU Laptop (12th Gen Core i3/ 8GB/...       HP   37012   \n",
              "3     Samsung Galaxy Book2 Pro 13 Laptop (12th Gen C...  Samsung   69990   \n",
              "4     Tecno Megabook T1 Laptop (11th Gen Core i3/ 8G...    Tecno   23990   \n",
              "...                                                 ...      ...     ...   \n",
              "1015              MSI Creator Z17 HX Studio A13V Laptop      MSI  247999   \n",
              "1016  MSI Stealth 16 Mercedes AMG Motorsport A13V Ga...      MSI  292990   \n",
              "1017  HP Victus 15-fb0131AX Gaming Laptop (AMD Ryzen...       HP   58800   \n",
              "1018  Asus Vivobook 16 2023 M1605YA-MB521WS Laptop (...     Asus   54999   \n",
              "1019  Dell Inspiron 7630 IC7630GHHRH001ORS1 2 in 1 L...     Dell   94490   \n",
              "\n",
              "      Rating Processor_brand Processor_name Processor_variant  \\\n",
              "0       4.30             AMD    AMD Ryzen 5             5600H   \n",
              "1       4.45             AMD    AMD Ryzen 3             7320U   \n",
              "2       4.65           Intel  Intel Core i3             1215U   \n",
              "3       4.75           Intel  Intel Core i5             1240P   \n",
              "4       4.25           Intel  Intel Core i3            1115G4   \n",
              "...      ...             ...            ...               ...   \n",
              "1015    4.45           Intel  Intel Core i9            13900H   \n",
              "1016    4.20           Intel  Intel Core i9            13900H   \n",
              "1017    4.40             AMD    AMD Ryzen 5             5600H   \n",
              "1018    4.25             AMD    AMD Ryzen 5             7530U   \n",
              "1019    4.05           Intel  Intel Core i5             1335U   \n",
              "\n",
              "      Core_per_processor  Low_Power_Cores  Energy_Efficient_Units  ...  \\\n",
              "0                    6.0              0.0                       0  ...   \n",
              "1                    4.0              0.0                       0  ...   \n",
              "2                    6.0              0.0                       0  ...   \n",
              "3                   12.0              0.0                       0  ...   \n",
              "4                    2.0              0.0                       0  ...   \n",
              "...                  ...              ...                     ...  ...   \n",
              "1015                14.0              0.0                       0  ...   \n",
              "1016                14.0              0.0                       0  ...   \n",
              "1017                 6.0              0.0                       0  ...   \n",
              "1018                 6.0              0.0                       0  ...   \n",
              "1019                10.0              0.0                       0  ...   \n",
              "\n",
              "                Graphics_name  Graphics_brand Graphics_integreted  \\\n",
              "0         AMD Radeon RX 6500M             AMD               False   \n",
              "1         AMD Radeon Graphics             AMD               False   \n",
              "2          Intel UHD Graphics           Intel               False   \n",
              "3      Intel Iris Xe Graphics           Intel               False   \n",
              "4          Intel UHD Graphics           Intel               False   \n",
              "...                       ...             ...                 ...   \n",
              "1015  NVIDIA GeForce RTX 4070          NVIDIA               False   \n",
              "1016  NVIDIA GeForce RTX 4070          NVIDIA               False   \n",
              "1017      AMD Radeon RX 5600M             AMD               False   \n",
              "1018           AMD Radeon AMD             AMD               False   \n",
              "1019   Intel Iris Xe Graphics           Intel               False   \n",
              "\n",
              "      Display_size_inches Horizontal_pixel Vertical_pixel     ppi  \\\n",
              "0                    15.6             1920           1080  141.21   \n",
              "1                    15.6             1920           1080  141.21   \n",
              "2                    15.6             1920           1080  141.21   \n",
              "3                    13.3             1080           1920  165.63   \n",
              "4                    15.6             1920           1080  141.21   \n",
              "...                   ...              ...            ...     ...   \n",
              "1015                 17.0             2560           1600  177.58   \n",
              "1016                 16.0             3840           2400  283.02   \n",
              "1017                 15.6             1920           1080  141.21   \n",
              "1018                 16.0             1920           1200  141.51   \n",
              "1019                 16.0             1920           1200  141.51   \n",
              "\n",
              "     Touch_screen  Operating_system  Sales_vol  \n",
              "0            True     Windows 11 OS   0.036905  \n",
              "1           False     Windows 11 OS   0.070810  \n",
              "2           False     Windows 11 OS   0.052144  \n",
              "3           False     Windows 11 OS   0.027861  \n",
              "4           False     Windows 11 OS   0.077112  \n",
              "...           ...               ...        ...  \n",
              "1015        False     Windows 11 OS   0.007621  \n",
              "1016        False     Windows 11 OS   0.006280  \n",
              "1017        False     Windows 11 OS   0.031972  \n",
              "1018        False     Windows 11 OS   0.033636  \n",
              "1019         True     Windows 11 OS   0.019155  \n",
              "\n",
              "[1020 rows x 25 columns]"
            ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ck9Vn9jhcTL6"
      },
      "source": [
        "Visualizing the data by interactive plots"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "PP2xAzc7aC9p"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EIa6yN8CcQoE"
      },
      "source": [
        "Graph between Brand and Sales_vol\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "e654nj85bcH8",
        "outputId": "84c30280-c47c-460d-bdc9-dcfa42f401e7"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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5QYMGKBSpUrFu5b3888/V44cOVwqD27evGmNu3Dw4EE1bdpUzz33nFq1aqWIiAidPHlSLVu2dHlWd37XwsPDNWPGDPn4+ChTpkxq2bKlmjVrppo1ayp37txxCo13797VwIED5evrqzFjxlivjxw5UpkyZdKaNWt0584da6yJ2bNnW8vEd4C2+Lpx44b8/f01Y8YMXb16NUZh6Mcff/zQisCIiAh17drVGqenSJEi8vX1Vf78+fXSSy9pzZo1unHjRoxzaNmyZY98Tv4nI3Q/AYcOHVJgYKDq169vlZaOGjXKOsmkew/IpUuXVqlSpXTx4kXdvn3b9tGVV65cqY8//til38+2bdtUtmxZa+AcO/qUR0ZG6vz583I4HHI4HBo2bJjL78+cOaMiRYqoRo0aLif5qVOn9Morr8jf31/btm3TlClT5Ofnpxw5crhckO7evatvvvlGVapUkb+/f6wDYyTE+vXrVaxYMTVs2NB62L5z545Lc6UHPQw86H08fvy4SpcurevXr2v//v0xah43bNigyMhIXbt2LVGl+mfOnFG1atWUM2dOq6mPc1+3bNmipEmTyuFwJKg0+VGaNm2qzp07x3i9a9euSp06tdq1axejX3dcDB48WPny5VOePHlUpEgRLVu2TJGRkVaTST8/P5cSZbs4v3u///67dc5evXpVwcHBat68eYwWA927d1fXrl0T9DDz1VdfqXHjxrp586bOnTun4cOHy8/PzyV4O/uCOUPCTz/95FLz/8ILL8jhcOiFF15wWfegQYOs7iXx1bVrV5UqVUotWrRQ9erVYx0ROjw8XEOGDFG2bNncNjqp87xav369Jk2apHHjxlnfn9OnT8cI3s7BmOJTYxBbLePdu3dVp04dBQcHu3x3r1+/rhIlSiR6WjJnLYF0b2BBh8Oh+vXruyyzceNGderUSVmyZFG3bt3UoUMHZcmSJdYHmMjISN2+fVs9e/a0BgI7ceKEfHx81KxZMzVv3lz58+d3qfFOzACK0Qs1nA9Z1apVswrCLl++rBIlSih79uzW9fnu3bsaPHiwvL2949wv8v7PZurUqWrYsKHKly+vDz74QAcOHFCmTJmsh9fIyEjNnz//kQNZRUVFaerUqfL29nYpFLg/eL///vtKkSKF1fw4KirKtofj559/Xg6HQ4sXL45x7Wjfvr1y5cql9957zxrnJPr39f7gvXbtWuXOnTtes0TYadGiRfLw8FDFihVVqlQpORwODR061OqetWXLFpUrV05Zs2Z163zNM2bMUKlSpVzWeejQIXXv3l21atWyzoHw8PA41Upv375df//9t65fv67q1aurW7duku5ddzJmzKjcuXNrxowZsU5peL/oXRHfeecdNWzYUNmyZVPXrl21bds23b17V2XLlo11hPLoon9nQ0ND5e/vr1atWrk0mW/SpIlKliypL774QuHh4dYI+M7t2+HYsWNKnTq1VbN69+5dVaxYUX5+fpo6dapmzpypnj17Kn369HHq5nb/+/nGG29YrQMPHDigKVOmqGjRogoMDHQZcyT6mAv79u1TYGCgGjRo4NKywfke3r59W3v27NHLL7+sunXrqk6dOho5cmS8BsY7efKkXnvtNQUEBOiTTz7R2LFjlTlzZq1cudJa5vr16xo+fLgcDofmzZsX53XHVfTrw7Zt26wWTW+88YY6duyonDlz6qWXXrI+e2dh6KhRo2I0iY8uMjJSly9f1vHjx7V06VK988478vf3l8PhkL+/v3LkyCF/f3/169dPAwYMcMvMOE87QvcTsn//ftWtW1dNmjRR9+7dlSVLFqufhNOePXvk4+MTY3RFu4waNUoZM2ZU5cqV1bt3b6tWeODAgfLx8Yl3v9qHib4OZ8ns/v37lTNnTgUGBsZ4CA8NDVWmTJnUs2dPl3Xs27dPW7du1a1bt3T79m3NmDFD3t7eat68ucuDyN27d7Vo0SLVrl3bbbXzf/75p0qWLOnSx1L6X/AuVaqU/P39Y3x2zn/fuHFD58+f148//qiTJ0/qypUrOnnypHLlymXVPHbv3t1afvv27WrTpk2CBpaI3lfN2R3g9OnTql+/vrJkyeLSP+vAgQPq2LGjXn311USN6v6g72z//v2VL1++GFOljBs3TnXq1FGtWrX05ptvPvI7H/33X331lTJlyqT58+dr+fLl6tChg7y8vKzaiUOHDql///7KkCGDNUqrncLDw1WgQAGVKFHCCq2zZ89WxYoV1ahRIy1fvlw//fSTXn/9dWXMmDHBzfVmzZrl0r/u5MmTevPNN1WsWDENHDhQt2/fVp06daygsGjRImXKlEldu3a1mrseOHBA9evXV7Zs2bR06VLNnDlTr732WpwfbqJzBqoVK1aoc+fO+v7779W8eXNVq1bNpV/apEmT1KtXL+XIkcPtzciWLVumlClTKiAgQB4eHipVqpT1/jqDd6ZMmazvRny6FTjPo59//llvvfWWxo4daz0ofPPNN3ruuedUs2ZNbd68WTt27LAKFRJ7zXFud//+/WrRooV69OihpEmTql+/fi6td/bt26fx48erYsWKatasmf766y/rPImtNceBAwe0fv16hYWFqWzZsnrxxRetY0mRIoUyZcqU6PNl9+7dSp06tVq1auXyeqVKlVxmk/jll1+UPXt2lShRQs8995yaNGkiLy+veH8/fvvtN/n6+lrBadeuXZoyZYo8PDzUvn17tWrVSgEBAXHuX+18/y5dumSNqeEMT5Lr+3r8+HHlz58/0bNJxJWzVdKiRYtcaozefvttZcmSRQUKFHApnI1+350+fboVvK9cuaI///zT9tqzuNi3b59y5sypzz77zCocmj17tpInT64333xT0r33/I8//lC1atUSNfK3k/N9WbBggfLnz28VVEWflcDhcDy01c/Dpivbtm2bihcvbrUk2L17t1q2bKnOnTvHqcBHuhd07g/Ma9asUenSpVWuXDkFBwerW7duqlixYpzeE2eB8IwZMxQQEKDOnTu7BO+WLVuqYMGCKlOmjLy8vLRhw4ZHrjM+nMd19epV61ydP3++8uTJYxX2Xb16Vc2aNVOZMmVUtGhRNWnSJE5TrEUvKHYOJDls2DCVKFFCvXr1UpkyZdSqVSv169dPAwcOVNGiRWO0Rol+za1bt66Cg4NjDd5OiWnqfebMGfXq1UuFCxdWsmTJrMqO6Pema9euaeTIkW6baSc657F+++23SpUqlVVwM2vWLOXOnVsVK1a0xg26c+eOBg8eLB8fn4d+z5zvz/3v06hRo1SwYEGdPHlSX375pUaMGKEWLVrI19fXLefy047Q/QTt27dPtWvXVurUqTVu3Djr9fv7pdrV1CK28Pz333/r008/Vd68eVWmTBn16dNHv/32mypWrBjvfm9xMXXqVA0bNswafXLPnj3y9PRUo0aNrBPQuZ8XL160TuDo/WrKly+vL774Qrdu3VJ4eLg+++wzlS1bVu3atXO5aDlriN3lzp07+uuvv1SsWDGVKVPGZXCXO3fu6JtvvlGlSpVcHrid+71v3z517NhRfn5+SpUqlTw9PfX8889r586dGjBggBwOR4w+2yEhISpfvny8m3hG77vp4+OjsWPHWjfcEydOqF69esqSJYvWrVunI0eO6K233lJwcHCiahCif4e///57rVmzxuWGVbZsWRUtWlS///67Nc1Ns2bNNHPmTPXp08ca3Cou5s6dq4kTJ8b4fvbr10+enp5W0+09e/Zo0qRJj62P4pEjR1S0aFEFBARYg74sXLhQLVu2VPLkyeXn56fSpUvHua+n8z2NXuspSY0aNVKbNm2sz+vMmTMaPXq0smfPrrx586pkyZKKiIjQ1q1blSlTplgH1dqzZ486duyovHnzyt/fXw0aNIjz/LHHjx+3pqtxOnfunPz8/DRp0iSdO3dOzZs3V40aNfTFF1/o0qVLat26tVq1auW2wXic3/Hr16/r+eef18yZM60RyitUqCBfX1+rAOHMmTPq2bOncufOrStXrsS7EHHFihVKmjSpgoODlTJlSlWuXNma3m358uWqX7++HA6H/Pz8VKBAAbcNBrN48WJ5e3tbD/5fffWVkiRJon79+sUYrOfmzZsKDw93ud68+OKLat26tVWzHd2qVatUvnx5q2vHH3/8oaCgIA0YMCDRTaOvXr2qL7/8Uj4+Pi5TzwUGBlpN2J3n5IULFzR48GC9+uqrev/99xP0ILt582bly5dPJUqUcAmiZ86cUePGja2alg8//PCRBXtHjhzRiBEjrJp255ga9wdv533m7Nmz1nRh7uT8jh47dkxHjx51CdLPP/+8Fbydr4eEhGjt2rWxdguKLXh37NjRuic8iT7c0W3evFm+vr46fPhwjNr5JEmSuIS/uIyYHB8bN26Uh4eHxowZ41IAceLECZUoUcKaYu1+zv1cvXq1unTpotq1a2vQoEFW5cG6deuUI0cOLV++XJcvX9abb76pFi1aPHL/o081WbduXVWuXFn16tXTpk2brKb1ly5d0vLly60uJxkyZHjk2As7d+5Unjx5rGeJ2bNnq2zZsjGC94wZMzRp0qQY3aXc5eeff1aBAgU0fvx4a7DY559/Xj179nQ5hosXL+rKlStx6n61evVqVaxYUX/88Yd69+4th8OhixcvKiwsTC+99JLq1KmjSZMmWeF19erVLvfo2DwoeDu7zPXu3VutWrWyWpUkRGhoqF599VX5+/u75IHoz7DubmkavYZ7/vz5SpIkifLly6dmzZpZy4wZM0b58+dXrVq19MILL6hFixbKnDlzrIWhe/bs0eDB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JUqU0BtvvBGjiVfbtm2tWtKWLVuqdOnSSpcunQICApQ9e3a3PMzu379fderUUZ06dWzpJnP16lUFBARY85k6S9MHDRqk1KlT65NPPokRvKtXr56gmnXn93Lv3r1as2aNNm/ebK1n3759KlGihOrUqRMjeCe2aXn07f7000/auHGjVcMQFhamihUrqlChQg8MySdOnFDlypWt69GmTZtUpUoVa6RkLy8vl7l9r169qqRJk7rMEesO0d+HM2fOqE2bNkqfPr02btxoHcv8+fOVN29el6Acl+AafZ5c5/3j9u3bWrFihXx9fWME71deeUVLly6N8zU6IiJCTZo0UbNmzbRv3z69++67Kly4sNq0aaPPPvtMX331ldKlSxejf727C/XWrFmjJEmSqHHjxipcuLCSJk0a4xqze/duNWnSRMHBwYm637lz2q24cLbwat++vdWiICwsTH/99ZcGDRqkoUOHWvf5P//8U/v374/XGAyPMmnSJHl6elr/dh7/7t27lStXLpd5wZ2it1CKiorSgQMH5OnpaQXWAQMGKE2aNC4BWbrXz79MmTKPnPLV+f05f/68wsLCrHvFmjVr5OPj49JqTLrXj985WOz9373ohe/SvfvExIkT5efnp6JFi6p79+76+++/tW/fPtWsWdPqJ/+4nj8jIyM1YcIEFSxYUK1bt1bnzp3VpUuXeA1AOGzYMHXq1MnleeyNN95Q8eLF1a9fPyvUnT59WhUrVlSVKlU0cuRINWzYUOnSpYvR5Dy+noaR/uPLeaybN2/WtGnT9Mknn8QoODh69KhSp06trVu3asSIEUqZMmW8+vgvXLhQgYGBioyMVLdu3ZQtWzZrG3v27NGnn34a79ZMzxJC979AbBeVyMhIlSlTRnXq1LEutFFRUTp//rw1x3FiRX/wmjlzpsucr23atFHRokU1a9Ys64a3Y8cO9ezZU2PGjNHdu3ddLmorV65Uu3btVL58efXs2VM//fSTrl69qi5dulg1ih988IG6du0qDw+PBA849iCLFi1SkiRJtGrVKpfXN23apCJFisSrdutBffgjIyOt0cSdzVfje0OIrU9Nu3bt9Omnn8bob923b19lyJAhUTUc69evl5eXl65du6Y5c+bI19fXelg4efKkBg8erHTp0mnKlCkuf+csvHAed1wcO3ZMgwYNcmmq9/3331uDv9y4cUM3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isjc3JzU1NToyZMnpK7OhxF7uWpra0lNTY0uXrxIrq6uFBMTQ8uWLSNDQ0MqLCwkIqLu3buTn58fXbt2jXR0dOjatWt079492rt3L23evJmOHTtGenp6z/W8pqamVFVVRd9//z35+PgQEVHPnj2l12RpaUkBAQGUkZFB9+/fJ11dXSIiqqmpoXbt2qnwHWCtkSAIT/1/xlqj2tpaMjY2pn79+lFJSQl9//339P7771NcXBzJZDLq0qULnT17lkaOHElLly6l2bNn09atW2nEiBHSee95id+Lffv2kY6ODn399dc0duxYWr16NQEgDw8PWrlyJRERxcTE0KNHj2jGjBmkra2tkr/ZwsKCUlJSqH379ip5PMYYexaOlhh17dqVduzYQSEhIfTjjz9Sp06d6NNPP6UBAwaQnp4elZWV0bJly0gul1Pnzp2pc+fORFR3geaAm7UGampqdO7cOfL09KTo6GhatmwZERH17t2bysrKpPvNnj2b7t+/T//v//0/MjU1JWtraxIEgY4cOUI2NjbP/byOjo6krq5Omzdvpn79+lGfPn2UXlNFRQUdO3aMzM3NqUuXLtLPOOBmjLU2ffr0oT179tD8+fOptraW3njjDfL396e1a9eSTCajtLQ0unXrFnl5eZGVlRVt2LCBdHR0SEdH57mfC4AUcF+6dIneeecdWrx4MY0aNYq++OILGjduHCUlJRERSYF3ZWUlLV++nCZPnqyyoJuIOOBmjL0QAgC87BfBWodbt27RgwcPyNjYWOn2srIyCgwMpEmTJtGMGTOULpaMtQZ3796lfv36UXh4uDRQIyIaM2YM6ejo0BdffEHV1dXS4Or+/fuUl5dHnTt3JplMRl27dm3yc+/du5emTJlCISEh9N5775GdnR0RERUUFND06dOptLSUzp49S+rq6vzdYYy1elevXqXo6Giqqamh9evXk6GhIf33v/+l5cuX07hx42jSpElNOpeJGUmKLl26RF9++SU9evSIVq1aJWXPXbx4kcaNG0cWFhYUGxtL7u7uRFQ3TmnO+Zoxxl4WDrrZH7p16xZNmTKFbt++TSdOnOAVOtYqVVdX08WLF8nR0ZGI/pe+PXXqVLp58yalpaUR0f8GfUlJSeTq6kouLi7Nfu6amhravn07RUZGUvfu3cnGxoaePHlCFRUVRER07Ngx0tDQ4JRyxlibkZeXR1FRUURE9MEHH5Cbm1uzHk889xYVFdHx48eppqaGOnXqRP/85z/p8OHDFBISQps3b6ba2lopi+7ixYs0adIk0tfXpxUrVpCLiwtPXDLG2iwOutlT3b59m5KTk+n48eNUWlpKJ06c4MCBtRnicbp69Wr6v//7P8rIyJAGa4sWLaJly5bRhQsXyNbWVmXPeeHCBUpOTqbc3Fzq3bs32dvb0zvvvEPt2rXj2geMsTYnLy+P/v73vxMAWrhwobTa/LzEgPvnn3+mMWPGkJaWFuXl5VH//v3J0NCQHj9+TJcuXaJDhw6RnZ0dAaDa2lpq164d/ec//6GIiAg6cOAAGRkZqfgvZIyxF4eDbvZUFy5coISEBDIxMaHVq1eTuro6Bw6szdmxYwfNnz+fsrOz6bXXXqNFixZRYmIiHT9+nAYNGvRCXgNPVDHG2qq8vDyKiYmh27dv05o1a8jZ2fm5fl8x4HZxcaGoqCiaPXs2nT17lj7//HOqqKigoKAgOnToEOnq6tLSpUupf//+BIBqampIXV2d5HI5aWpqttBfyBhjLwYH3eyZysvLqUuXLiQIAgcOrE1KT0+nyZMnU1FREX300Ue0fPnyFg24OfWRMfaqycnJoYSEBEpKSqLevXs/9+9fv36d7O3tadiwYZSamirdvmnTJlqwYAFdvHiRzp07Rxs2bKCOHTvS0qVLydbWVjqf8nmVMfYqUPvzu7C/KplMJl3wOOBmbZG1tTW99tprFBoaSkuXLm3xFW4eGDLGXjViW62mBNxEddk+xsbGJJfL6fjx49LtJiYmJAgCVVZWUlBQEE2fPp2qqqpo9uzZdPnyZel8yudVxtirgINu9qf4gsfaKkEQKDc3l9LT0ykrK+uFpZQzxtirpDlttfr27UspKSlUXV1NS5cupezsbHrw4AFNnDiRpk+fTpaWlkRENG7cOJo4cSJ16tRJqcUiY4y9Cji9nDH2yqqpqaGVK1dSaGgoWVhYvOyXwxhjf1l5eXk0e/ZsevjwIf38888UHh5Oa9asISKix48fk4aGBhERVVRUUKdOnV7mS2WMMZXjoJsx9krjegSMMdY65OXl0cyZM+mXX36hXbt20ZAhQ4iorh4GEWfWMcZeXRx0M8YYY4yxFyI/P59mzZpFACghIaHZPcAZY6wt4D3djDHGGGPshTA1NaV169aRhoYGxcbG0qlTp172S2KMsRbHQTdjjDHGGHthzMzM6OOPPyYjIyMyMDB42S+HMcZaHKeXM8YYY4yxF666urpZldEZY6yt4KCbMcYYY4wxxhhrIZxezhhjjDHGGGOMtRAOuhljjDHGGGOMsRbCQTdjjDHGGGOMMdZCOOhmjDHGGGOMMcZaCAfdjDHGGGOMMcZYC+GgmzHGGGOMMcYYayEcdDPGGGOMMcYYYy2Eg27GGGOMMcYYY6yFcNDNGGOMMcYYY4y1EA66GWOMMcYYY4yxFvL/AR7cyT592utkAAAAAElFTkSuQmCC",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "plt.bar(df['Brand'], df['Sales_vol'])\n",
        "\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "mAF6hh3Vb35A",
        "outputId": "71c1fd84-0203-47a2-84a7-0e5a2231560e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "plt.bar(df['Brand'], df['Price'])\n",
        "\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "yNuh-Nfgck8q",
        "outputId": "ada22053-f530-41ce-9a74-bbf7d6555f47"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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eZQoUSJNnDhRkn3v4fnz51WhQgV9+umnkqS7d+/qwoULmjdvnho3bqzhw4e7lH3t2jUVK1ZMX331lSTXitYKFSqobdu2thxnXKxfv145cuTQb7/9JklauXKl0qVLp9y5c2vt2rXWvZO739M7d+6obt26ypUrl9XgcO7cOeXPnz9aZUZsRUZG6tatW0qTJo0cDodLJXtCj9/5/JMnT8rb29vqaRf18Xz58sW6F1NkZKQuXbqkJk2a6N1335X08PPl4+OjKlWqqESJEmrTpo2tLd7OfTr/xs774hUrVihFihQJCt6POx/v3r1bZcqUUb58+Z4avK9du6aaNWuqd+/eLo+PHj1aDodDOXPm1Pr16+N9DXW2uEdGRur48eOqUqWKcuXKpXv37unKlSvKkiWLBg8eHK99J1TdunXlcDjk7+9vnTfi8xmYOnWqatWqpRYtWlg9//6vBG9C9z/g5MmTunbtmm7fvq2OHTsqderU2rhxo6SHteJp0qTRJ5988kyPcdasWapatarCw8Otx8LCwtSyZUvlz59ft27dsq3s06dPK3Xq1NFuiE+dOqWSJUsqadKkVviM6aTp/LJ++eWXKlasmNU90XnS27x5sxwOh1trBn/66SdVq1ZNTZo00bhx46zWjKjB+0ldzaMG988//1wlSpSwNXg/ekILDAxUpUqVNHfuXLVu3VoNGjRQxYoV1bZtWxUrVsylBc1dZV67dk158uRR7969tWHDBrVo0UIBAQF66aWXlClTJr333ntx2v9rr73m0mtEeljJkj17dl29elU//vij0qRJY91c3rlzR1OnTtWZM2cS9sKewvm6nd+Z7du3y+Fw6I033lDx4sXVpEkTvfHGG5owYYKyZs1qVRDE1qMX8zlz5qhevXqSpO+++05p06a1gtitW7e0b98+63sT9W/ivKm5d++eFixYoAwZMqhNmzaPLedpDh06pAwZMmjo0KG6dOmSy++c5a5bt84K3s5KAnd5tLvdhg0b1LlzZ02fPl1LlixRy5YtNWrUqBh7WMT1gh/T9levXlVgYKCKFCniEnTcFbwfLfPo0aPq3bu3cufO7dKLwhm8X3nlFZeusk5Rj+fjjz+2Qvo/Fbyd+zl79qz++usvnT9/3rqBGz9+vBwOhxUg47v/qMcaFham8ePHq169etqxY4f1uLPFO64VMZcuXbKCwKxZs1S+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MFZzAS1fvlweHh7Reho6g3eLFi2sStK+ffsqVapULj2T/i0I3TaK2spx8OBBBQQEqEyZMrp69apu3rypV155RalSpdLvv/9ubfdPiYiIsMYTnz17Vnfv3lX//v1VtWpVawKmq1evavjw4SpQoIDV9dAdhgwZonz58snDw0MtWrSwTkwffvihypYtqyJFiqhHjx7y9/dXqVKlJEm9evVSzZo1rX0sXLhQ6dOnV65cuVSgQAE1a9bMqpl87733lDRpUuXLl09+fn7KkiWLdaMRH1EvogsWLNDrr7+uIUOGWL8PCwuzgnfr1q2tG6yYJtCJ2s22f//+qlWrliZPnqwTJ07owYMHmjhxYrSu5r/99ptbapVv376tXr16KVWqVNFq6H/99VcNGjRIHh4eCer2G/UCNH78eHXv3l358uVTsmTJ1KZNG5ea3xs3bujnn39Ww4YNVaxYMetmLy4h5fjx43rjjTdUqFAhlyEatWrVUo4cOfTGG28oMDBQL730kooWLWpdFO36roWEhKhw4cLRusdGfU3z5s1Tly5d4vS5vHPnjt5++23lz59fVapUUdq0aa0L1L179/T111+rYMGC6tixo/766y+tXLlS9erVU/Hixa339cyZMypTpozV9fzu3bvy9PTUm2++aZVz//59zZo1S0WLFo1VN/zg4GAtXbpUklS9enXVrVtXW7du1ciRI5U3b161b99eM2bM0LJly1SmTBl16tTJCid2TDB16NAhpUqVyqV7nvP1b9y4Ubly5dLNmzetxx7tBh/bMrJly6bp06fr3r17unv3rqZMmaIkSZJYExldvnxZffr0Ua1ateLdtXjRokVKliyZ1Rvg0qVL6ty5s3Lnzm31THE6fPiwXnrpJWXMmNGayO1Rzs/gnj17NHfuXP30008uvS6iBm/n+f7AgQPxqpSISUREhB48eKABAwbov//9r6SHFXC5cuVyual23sB98cUXCeqd1KJFC3l4eKhSpUrq06ePvvrqK3344YcurSrxNXv2bCVOnFjDhw+3zilRW54uXLhgdS1PaFmP079/f2XOnFmfffZZtEqRCxcuqH79+kqSJInq16+vK1euaMOGDSpVqpQ6duxofabOnj2rgQMHauDAgXr77bet78WzDN4PHjzQrVu39N///lejRo1SmTJlVKhQIZfzxe3bt9WmTRtVrlxZxYoVS1BP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yf4JCxcuVLp06VSqVCnly5fPCmRR1zaMjIzUzJkz1bhx4wQvbfK4k+SgQYNUtGhRjRs3ziV4Z8iQQRUrVoxxHGlkZKRu3rypmjVrRpswynlBvnv3rmbMmKE8efK4tEDER9SWYm9vb+XPn1+JEydWhw4drLH4+/btU6FChRQQEBDtohc1cKdKlUqBgYHRau+cy2+UL19e06ZNU/fu3eXp6anixYurVq1asWptfNyx3759W40aNbKWMrt586aOHDmiDz74wGUN65UrV2rt2rXx7gL76FjBkydPWmPud+7cqY8//liJEye2xmdJ/2uhnjRpkvWevPLKK6pSpcpjA9mjF8K7d+9q6dKlKlGihLWMnPS/INmrVy+1adMmXq8prn788Uc1adJEFSpU0KxZs6wbLGfwLl++fIKX85g+fbpy5sypefPmuUxymDdvXr322msxPse5JJP0sBuXl5dXtNnrJcVr8qTg4GCVKVNGAQEB8vf318svv6zcuXNrypQpWrBggRo1amSNQ9u/f79q1aqlhg0bumV9502bNilNmjQuFTQnTpyw1ibftGmTpP99B52THmXMmDHes/H/9ttvatCggSpXruxyo3zhwgXVrVtXFStW1IIFC9xegbp161b5+PiofPnyVjfDqN+5hQsXKkWKFHr11Vet747zGPbu3auUKVNaa7k7W2H69+/vUuFy8uRJNW7cWF5eXgoICFCaNGnife6RHg6jqVevnlKmTGm1ljmDd44cOdS0aVP5+fmpXLlyatmyperXr69mzZqpadOm6tGjR6zHtkb16PJNzuDtXCrp0TAfm8pk5zJOgwcPjrEy8Nq1a5o8ebIKFiyo0qVLW2uoZ8uWzW2zlDudOnVKvr6+mjJlimbPnq3GjRurSpUqLusof/jhh3rllVfUvn37WA1bifoeN2zYUE2bNnXrMcdW1PGjzsmipIfjiWvUqOHSK+bu3bsqWbKky/rzCbFw4UJly5ZNefPmVc6cOZU9e3br+v7ll18qU6ZM1goAOXLkeOJwh9DQUJUuXdqaq+DevXvKkiWL+vfv73JemDlzpmbNmhXr7rPO63nNmjWtSQCdunfvLi8vLytQxqWxwbnt5MmTVb16dZflAr/77juVL19eLVu2dNsKJjFxVpSfO3dO1atX18svv6yFCxcqS5Ys+uyzz1SoUCEVLVo01pXUXbt21Ycffmh9ht5++20lTZpUpUuX1qZNm1x6TkoPK6knT56sBg0ayM/PL05LiEa9l//ll180ePBgpUyZ0q3DppzBu1KlStHmPrLDnj175HA4NGPGDEkP5+PImTOnbt26Fa0X5NPC/4QJE/Txxx9r7dq1GjlypNKnT69OnTrpyy+/dGmsyJcvny1j018UhO5/wJEjR9SoUSNVqFDB7eNjHmf//v3KmjWrvvnmG+vGd/jw4cqcObM1c3bUL5E7u2zt27cv2lILAwcOVNGiRTV+/HirC9yePXtUp06dx57wbt26pYIFC1qTvD26nbO1cfbs2W7ppv/7778rTZo0mjRpko4cOaJly5apRo0aqlu3rnUDvGfPHmXNmlU1atSI9vzTp08rU6ZMLuMZIyMjXcL35MmTlTFjRuvm6ejRo7p161a8w0nU96RNmzbq2bOn9u3bpz59+qhmzZrKkyePvLy81L59+3jtP6pHT7offvihOnfubK25Kz282Z44caK1hu2jnMeWIUOGx97oP/p3dt4s3Lt3TytXrpS3t7eqVKmisLAwhYWFKTIyUgEBAerRo0dCX+JTbd68WalTp9brr7+uVq1aKWvWrOrXr58VjIODg1W4cOE4t3xFnRAqIiJCW7du1csvv6zSpUvL19dX7733nk6ePKk5c+aoYcOG1o3p47p0LVmyRHny5NHixYuti2dERIQiIiLUsmVLlxUEYuvIkSNq0aKFmjVrpsWLF2vJkiWqXr26mjVrJofDofLly1t/q0OHDrllbfl33nlHly9fts4Zp06dssJmcHCwfH19VaFCBauSI+qKA7Vr1473OLFjx47J19dXiRIlclmuRXq4LIxzbXl3j+O9cuWKqlevLofDEW1CNudrmzNnjjJmzOjSen/q1CllypTJpWug9PCmNH/+/PL19VWZMmWs8fbbt2/XF198oWHDhrllcrvz58+rffv2Sps2rTXMwxm8ixcvLofDoXHjxun999/XgAEDNHjwYA0cONDlxj+2/v77bxUoUEAVK1Z0eTwiIkKbN29WxowZrfNDbIWFhaldu3bRluK7e/euzp8/b3V9j4yM1LZt29S2bVs1btxY//3vf902OWDU7+/Zs2fVqVMnKxT89ddf6ty5sypWrBhtyEhcWsKcZfTp00ft2rWzbUbqp5XvXLpu7Nix1nf0hx9+UO3atVW1alVt3rxZf/75p4YNG6YsWbIkaC1rpx07dihdunSaOXOmQkJCFBISonbt2snT09Nqedu9e7fWrFmjJUuWPHVip4sXL8rf31/Xr19XcHCwcuTI4dKCnJAJSsPCwuTv729NCBr1sxwQEKC2bdvGel+P9sA5duyY9d5H9fXXX6t69eq2rf+8Y8cOtWrVyrru//nnn8qSJYv++OMP/fnnn3rttddUuXJlORwOvf/++7GqiJs+fbr1Hbl3756CgoK0efNmVahQQVWrVtXq1atd9hMWFqZhw4apR48e8VpC1Hkvnz59eiVLlsyWtaRDQ0PVrVs31apVK9Y9AePr/v37LhWY69evl5eXl0vgXrBgQax6iv3yyy/y8PCw9nfu3Dm98847SpUqlSpUqKCpU6fq4sWL6t69u3r16iXp+ehl808jdP9DDh48qFatWrms6WenjRs3qmDBggoODnYJMYGBgfL09Ix2k+ouixcvttaofLQ1+D//+Y/SpUvnMt7YKabgHRYWply5clnLb0j/u8E4cOCAZsyY4Zbu8M734P3331fNmjVdfvf777+ratWqVqCLiIjQvn37YryZP3nypMqWLasmTZq4DCeIWob0sKul8+Y4Pl2HHhe03n77bVWoUEGJEydW69atNW/ePN24cUMjR45U06ZNE/S3btWqlbp27Wr9+8aNGxo4cKDSpEmj+vXru2zrDN7JkiVzGVN6+/ZtLViwQJUrV45Vy9r48ePVvHlza74BZ+v8qlWr5O3trdy5c+ull15Sly5dVKhQIeuzYNeJ/MyZM3r33Xdd1gKfPn26fH199dprr1lB+MSJEypdunSsbxSj3vg+GhR27dql6dOnK1++fKpRo4YKFSqkrFmzauHChTF26Yq69FPjxo2VL18+zZ8/X5cvX9bly5c1fPhw5ciRI04zREd16NAh1a9fX3Xq1NHhw4d169Ytbd26VY0aNbKWynLX+z9q1CglTpzYCmYnTpywxuY6g/fJkyeVL18+VapUye3ntJMnT6pkyZLRVlWQHrZ4t2rVyi1h4FFXr15VtWrV5OPjE633UdQWG+lh18DDhw9rz549Klq0qFq1aqW1a9dKevj9SZUqlcaNG6d58+apcuXKypw5sy2T8UgPb+7btGnjEryvX7+uuXPnqmDBggnujeQUFhamJUuWqGjRoqpdu7bL78LDw1WzZk05HA6VK1cu1vu8efOmSpYsaU24Jz0c+96nTx+lT59eKVKkUJcuXZ446VJCOPezZs0ade3aVa+88ooaNWrkss3+/fvVqVMnVa1a1eU44+rvv/9WpUqV3L7mcmytXbtWadKk0VdffRWtNe3nn39WkyZNrHkSChQo4LaWxAULFqhs2bK6ceOGy9+tdevWyp07d7T7laiibr9v3z6dPXtWFy5cUO7cuTV9+nTlz59fvXr1sgKcs1X0119/jfNxOsuqXr266tWrZz3uvDb0798/2mdDivkeaufOnapQoYJ69uypCxcuWI0hkyZNinGiU3et+hKTuXPnqmHDhkqZMqU++eQTnTx5UpMnT9bLL7+sK1eu6PLly/r999/10ksvPXUOkKize0sPlyPt1auXdY9w9uxZlStXTlWqVLHOh5Jc1oiW4nf/dejQITVp0iTBPUOf5Pz58wkerhQXzvfh6NGj8vb2tnLK8OHDlS5dulg3ag0aNEgdO3a0vtdt27aVr6+vunbtqsqVKytp0qQqUaKE25dTfJEQuv9B/2St8tKlS5UyZUqrhcg5DjksLEw5c+Z021qyMZ3oW7RooeLFi2vWrFkuF7ILFy4oU6ZMyp49u8sNetQJo5wzdTqP9/3335evr6/LzLfSw5bzatWqJWgc4qNGjRqlcuXKWWs7R51kIlmyZLGqMInaBSlq8I560a5evbo6duwYr2OMKWhFHet3+PBhq7uc8z195ZVX1Lp16wR9/mJ6LcHBwdZSFo9Obnbr1i2NGzdOVapUcXntkZGRj72wR/0sjRw5UhkyZFC/fv3Us2dPZciQQR06dLDGnK1YsULlypVT9uzZXcZu2TEhR2RkpI4dOyZvb295eXm5LMElPQzehQoVUr9+/awb2dgcR9T1P6WH42Lr1aunli1bRutWePbsWS1btkwtW7ZUkiRJrNnSY+rS1a5dO6uVtFWrVipVqpTSpEmj8uXLK1u2bAm+iT1y5Ijq1KmjOnXq2DZk5vr16ypfvry1fqmz9nzo0KFKmTKlvvrqq2jBu1q1avFqXXd+Pg8dOqR169YpKCjI2s/hw4dVvHhx1alTJ1rwTmjX8qjl/vLLL9q+fbvVonDjxg1VqFBBBQoUeGxIDgkJUaVKlazz0h9//KHKlStbMyRnypTJZT3f69evK3HixC5rwrpD1PchNDRUbdu2Vdq0abV9+3brtcyfP1+5c+d2CcmxDaxR18Z1Xk/Cw8O1YsUKFSxYMFrw7tu3r5YuXRqnCu579+6padOmat68uQ4fPqwxY8aoUKFCatu2raZNm6bvv/9eadKkiTbO3p0VfOvWrVOiRInUpEkTFSpUSIkTJ452rjlw4ICaNm2qunXrJuja584lt2LL2eurY8eOVo+CGzduaPfu3Ro6dKhGjBhhXff//PNPHTlyJE5zMTzNxIkT5enpaf3b+R4cOHBAXl5eLuuCO0XtrRQZGamjR4/K09PTCquDBw9WqlSpXMKx9HCcv7+/f6yWgnV+hv7++2/duHHDunasW7dOPj4+Lj3JpIfj+Z0TyD76+YtaIS89vG58/vnn8vX1VZEiRfTKK6/or7/+0uHDh1WjRg1rrPw/dW8aERGhTz/9VPnz51ebNm3UrVs3de/ePU6TEL799tvq2rWryz3aW2+9pWLFimnQoEFWoDt37pwqVKigypUra/To0WrUqJHSpEkTrct5fDwvs/7HhfP1BgUFafr06frqq6+iVRwEBwcrZcqU2rlzp0aNGqXkyZPHaZz/woULFRAQoIiICPXs2VNZs2a1yjh48KCmTJkSr95N/yaE7n+BmE4eERER8vf3V506dawTamRkpP7++29rbeOEinqz9c0337is89q2bVsVKVJEs2bNsi5ue/fuVZ8+fTR+/HjrxBf15LVy5Uq1b99eZcuWVZ8+ffTLL7/o+vXr6t69u9Wa+Mknn6hHjx7y8PBI0KRjMVm0aJESJUqk1atXuzz+xx9/qHDhwrFu1XrcOP6IiAhrJnFnl9X4nPhjClrt27fXlClToo23fuONN5QuXboEtWps3rxZmTJl0s2bNzVnzhwVLFjQujE4c+aMhg0bpjRp0mjy5Mkuz3NWXkhxCyinTp3S0KFDXbrnrVmzxprs5fbt27pz546WLVumIkWKuNx02znpyOjRo5UqVSp16tQpWhe8GTNmKHPmzBo8eHCsbmA+/fRTFShQwPocTJgwQWnTptUbb7yhbt26KWvWrKpSpUqM6yXPmzdPpUuX1u+///7YLl1JkyZV3bp1NW3aNM2cOVMLFy6McxB5ksdVLrlLeHi4OnXqpGbNmmn8+PFKnz691Xo6bNgwJU6c2CV4BwcHK3369KpXr168utsuWrRIXl5e8vHxUe7cuVWoUCGrlcoZvBs0aBBt6cf4ilpulixZVLhwYSVNmlS1atWyPhPO4F24cOHHfn+dIWXPnj26cOGC9u3bp0qVKilFihQaM2aMtd39+/d15swZ+fn5uW083ePOXaGhoVaLtzN437x5U7NmzVKxYsViFUS2bNniMq5z2bJlatq0qbX0mLPFbsWKFSpQoIDVdb5Pnz7Kly9frMpwcp6bZsyYobJlyypTpkzKkCGDpk6d6tKjqVGjRmrWrJnbgnbUc+LJkyc1f/58qwX7yJEjGjBggAoXLuwyJ4f0sJLGri7A/4T//Oc/atKkiTZu3KgePXqoTp06KlKkiIoXL65KlSolOAA+7lpz7tw55c+fX6+//rrLOeLIkSPKmzdvtKXBZs6cqUaNGrkMCTx27JgKFSpkff62b9+uxo0bq3jx4po6darmzp2r1157Lc73J0uWLFGFChWUN29eBQYGWhWjkyZNsnp0jRgxQl27dlXq1KljPB88WiE/YMAAl3uyr776Sg0bNlSqVKn0/vvvq2DBgipUqJAtgdv5Hdm9e7dWrVqlBQsWuFREb9q0SUOHDrXm5ciVK1e0IYmPc/jwYWtfUcefjxs3TqVKldLAgQOt4B0aGqqWLVuqZs2aql+/fpzGcP+bRB3WkT59etWqVUs+Pj6qXbu2y33b5cuXVaJECVWqVEmpUqWK18R6VatWVaJEiZQjRw6336P/GxC6X3DOL9PmzZs1cuRITZ061WoZWbFihfz9/VWzZk2dPHlS+/fv18iRI5U9e3a3rSUrPaztzZ07t959912XmunWrVurePHiCgwM1Jo1a9SwYUN1797d+v2ePXv07rvvSnrYMp8iRQqNGjVKX331ldq0aaNEiRIpNDRUx48f18SJE1WsWDGVK1dOjRs3TtBkH85jv3Llis6dO+dyAX755Zfl4eGhFStW6MqVK4qIiNCbb76pwoULx2l8zeNCyZAhQ1SiRIkEjXd9XNBKmTKlypcvr6lTp+rjjz/WoEGDVKRIkQRP8nP48GHlz59fvXv31q+//qr8+fOrcuXK1oUvJCREw4cPl4eHh8tEP05xuUldtmyZHA6HsmTJEm1M3KpVq5QsWTKrxTE8PFzLly9X0aJFVbZs2fi/wBg87phHjRqlHDlyaNSoUdHGbH/77bexHkO8e/dudenSRRUrVtQXX3yhV155xaW2/8CBAypYsKBq1aplPRb1c1qpUiXru/S4Ll0dO3ZUzZo1lTRpUn3xxRexe+FxYPdcFZs2bVLRokWVKFGiaJPKxBS8T506Fadlp5w3Xtu3b1fatGk1efJknTlzRhs3blSnTp2UIkUKa5I2Z7e7Fi1aPLEb6tNE/RsGBQXJ09NTX375pS5evKjffvtN3bp1k7+/v2bPni3p4eRdRYsWVenSpR97c3z9+nX5+fmpffv2unjxog4dOqRKlSqpadOmLhWIb7/9tvLkyZPgc7/0v+/Hxo0bNWDAAPXq1culN9KFCxeidTWPzdwVkZGRCgoKksPh0KhRo3Tv3j1t3rxZadKk0X/+8x916tRJiRIlUv/+/a1JOYOCglS1alVrab7Y9OSI2iIY9W9y4sQJbdu2zaVrp3NpoCZNmlhrRifEhAkTXCaQPHHihDw9PZU5c2br7y49DHhvvPGGChUqpIkTJya43GchpvPo9OnTVblyZaVIkULt2rXT4sWLFR4eri+//FK1atWKdwh89Hm7d+/W0qVL9csvv1jn6o8++kjlypVTnz59FB4ertDQUL399tvKmzdvtIqMBQsWqFSpUurUqZN1fjtw4ICKFCni0liwceNG9e/fXxkyZFCpUqVUv379ON2f7Nq1S+nTp9fo0aM1ePBglS5dWk2aNLGWKtu0aZPq16+vmjVrPnWis6gV8m+//bbSpUuntm3b6ptvvrHOd3PnzlXz5s2VNWtWORwOt1fgOP/mixcvVtasWVW6dGmlSpVKDRo00Pr1663fX716VXv27FGZMmWUNm3ap46hf9TixYtVtGhRl5ntx4wZEy1437lzR1euXLHK/b+0PFVUv/76q7Jly2bdo23btk2pU6eWn5+fy5C5atWqKUWKFHEOzFGXuStYsKC1WsX/xXHbT0Lo/hdwLi1Ro0YNpU6dWvXr17dastesWaNy5copZcqUKlCggPLmzevWyR8mTJigTJkyudSIRb2JGTx4sEqUKKFcuXKpWrVq1sXqzz//tJbouH37tmrVqmV1pbt48aJy5MihPn36RCvv/v37CZr0zXkCWLZsmapUqaJs2bKpVatW1sRSDx48UK9evZQ0aVJr7eXHrUv4NFGD965duzR+/HilSZPGLbV/Txo7U7t2bSVLlkz/+c9/3NI97/79+xoxYoT8/f31yy+/aOfOncqTJ48qVqzoErxHjBghh8OhpUuXxnrfzhsB53/Pnj2rvn37yuFwWC1+US+SRYsW1QcffGD9+969e/rhhx9c1h1OKOdnZMuWLRo7dqzGjh3rMlZ65MiRypkzp0aNGuWyEkBcOSdHqlq1qnLlymVVjkQNg1myZHFZesP53erSpYs1hvBJXboOHTqkzz77zLbxZ3bOVbF9+3Y5HA4VKlRInTt3jvYdHDZsmDU+MLatJNLDVkVn19zIyEhNnz5dL730UrRu0h06dFCpUqWsv/HJkyfjPRZtxYoV1v87z4FffvmlKlSo4HK+/Ouvv9SpUyc1bNjQGoZx7dq1p/ayCQoKUpkyZayxm3v37lXlypXVqFEj/fbbb1ZXwfgOLYjaxdtp8eLFypAhg1q0aKE+ffrI4XDo7bfftlrfL1y4oA4dOrgsBfUkUW/OPv/8cyVKlEgfffSRPv74Y5du1gsWLJCHh4def/11l8Bw5syZWI1JjWmIzqOt/1GPJSIiQm+99Za8vb3jPReCU2hoqMqXL+8y+drZs2f13nvvKUOGDC7zl0jS8ePHNXjwYGXOnDlekx8+S1GXLf3uu+/0ySefWD0Q/v77b6vS2Lnd66+/rnr16sWrUmv06NEaNmyY1Tti8eLFSpEihYoUKaKkSZOqWrVq1oSsn3zyiQoWLKiUKVPKz89P2bNnf+w90bJly1S2bFl16NBBu3btUlBQkLy9vWNcdePatWt68OBBnI7/6NGjev/99/Xee+9Zj61du1Y1a9ZUw4YNXcaER0ZGPrVb8+Mq5FOkSGFVyF+6dElhYWHasWNHnCop42LDhg3KlCmTtSzd7t275XA4VLNmzWiTm929ezdW19FHW6e3bdum1q1bq1q1ai6z248ZM0b+/v4aNGhQtErw/6sBMCIiQu+//75effVVSQ8r+vLmzau2bduqXbt28vHxsYYI7ty5M84VIFGdP39e+fPnd1nBBv9D6H5BOU8eZ86c0X/+8x/rgrxr1y41adJE1atX1+LFi63tN2zYoN27d7t1LdGbN2+qRYsW1uQUx48f15IlS1S3bl317t3bas0NCQlxWfN6z549SpkypUaOHCnp4fq3+fLl086dO3X27Fl5eXm5zAK6aNGieM8QG9NJ9qefflLq1Kk1ZswYbd68WW3btlXBggVdZvP86aef9NVXX2nSpEkJmvTB2RqYJUsWJU2a1G3rYD4paB04cEATJ05MUNB6dCKTK1euKH/+/GrVqpWkh58zHx8fl+AdHBysKVOmxLomed68eerevbs1IZdTaGiounTpopQpU7q0dl+/fl158+a1ukM5/7b37t2LU+iKjR9++MGaJK5w4cLKlSuXy8zQI0eOVJ48eTRs2LAETXiyb98+derUSYkTJ7bWH3e6ePGi8ufPH23yl6CgIKVKlcql8uZZdumyazzg5cuXtWnTJi1evFiVKlVSu3btovXa6NevnzJlyqSrV6/Gap/37t3TSy+9pOzZs1vP+fTTT5U+fXrr387P1fLly+Xt7Z3gicecN+pRe/lID7szFyhQIFpL09q1a5U4ceI49+bZtWuXSpYsqZ49e+rixYvat2+fqlevruzZsytFihQJPveEhISoSJEiunTpkk6cOKEcOXJY38XQ0FB5enrK4XCod+/eVsVoaGiounfv/tTzt/PaEBoaqqCgIF28eFFz5syRw+FQzpw59emnn7psP3/+fKVNm1YDBgyIV3B43PI2kyZNcrlmfP/993rllVeUKVMmt03o5XxvNm/ebLX8nzt3TqNHj1aKFCmijbk/evSoRowYEe+Z+J+lhQsXysPDQ5UqVZKnp6cKFiyot99+22U8+qFDh6xhUPHtwTZhwgQ5HA6NHj1aBw8eVOnSpTV58mTduHFDQUFBeuWVV1SiRAmrcuXatWv67rvvtHbt2hgrDB9dCaJMmTLq0aOHxo8fr7Jly+qHH37QDz/8oGXLlmnVqlWaOXOmtRRjbIPd2bNnVaZMGWXKlEkDBw50+d3atWtVo0YNNWvWTMuXL4/TexGbyawenZvAne7cuaPAwEBrXpJjx44pX7586tChg4oUKaKSJUtqzZo18Q7AK1assCr2du7cqfbt26ty5couwXvcuHHy8vKKNjTj/4rTp09r+vTpmjp1qtXT8uzZs9q1a5du376tgIAA63p08OBBpU+fXt7e3gmaoDGqb7/9VqlTp7aGF+F/CN0vsO3bt6tNmzaqXLmyyxifPXv2qGnTpqpevbpb18OL6SRZs2ZNVapUScuXL1fdunVVrVo1devWTRkzZoxxsrA9e/YoU6ZMKly4sPXYpUuX1KhRI02bNk0+Pj565ZVXrNafkJAQ9ejRI95j0B9tIQoODla5cuWsk/HNmzeVI0cO+fn5qVixYi7jIN3Frtku7QpaP/74oxwOhxo0aKDg4GDrBunnn39WihQprBPzzp07lS9fPlWpUiVaDfzTgvf169eVL18+Zc6cWcWLF1fPnj1duondvn1b7du3V4oUKdSvXz+NHz9ejRo1UrFixWzvHnb8+HHlypXL6pJ97do1LVu2TNmzZ1fLli2t7YYOHaqiRYvGetjB48aRHTx4UB07dlSJEiVcWrPCw8NVuHBha9mYqJw9GP5NXbqcx3z27Nlos6XOnj1blStXjjF4OyeLjK19+/apbNmyKly4sK5cuaKDBw+qWLFi+vjjj13C++HDh5U3b94E3zhcv35dn376qfz9/V1m8N6wYYM8PDw0efJkl9bu48ePx3tYyKPBe+/evapbt65bZqo+ffq08uTJow4dOmjOnDlW61xISIhy586tPn36aMGCBUqUKJGGDRtmtfg9bfyk8/d//fWXKlWqpNq1a1sVXFOnTpXD4VDPnj2jrd27cOFCORwOBQYGxvmc8KTlbZwtgpMmTVK/fv3Utm1bt8z4HnXC0Fu3bqlIkSLKkyePFbzPnz+vMWPGyMPDI1rwfhG7xO7fv185cuTQ119/bYWkIUOGqEqVKho5cqTCwsK0bds2tWvXTmXKlEnwNezLL7+0Pg+tW7d2mQ/j8OHD6t69u2rVqhXjPBlPs3DhQpUvX1758+eXw+FQlSpV5O3tba0rnTt37jitw+00e/ZsFS5cWOXLl49WqbN+/XqVKVNG7dq1i1Pr+bPo+RT1Nd27d0+//vqrDh06pGvXrqlcuXLWeW/nzp1Knjy5AgICrAlf42L79u0qUKCAunXrZlUq7NixI8bgPXv2bFvneHle7dmzR7lz51a5cuWUMWNG5cuXT4sWLbJ+//vvv6tYsWJWw8qePXtUu3ZtDRw40G091s6cOaPq1au7ZdnQfxtC9wtsw4YNKl68uFKlShUtXO/du1ctW7aUv7+/W9aSjXrjFPUEu3HjRpUvX17p06fXiBEjrInDPv/8czVs2NClK/ju3buVKlUqVa9eXTly5NDrr79u/a53795yOBxq3ry5y/6HDh2qIkWKxKu7y+zZs5UlSxbdunXLZamdDz74QMHBwdbEKn369NHly5dVqVIleXt7KzAwMM5lPY07Z7u0O2jt2bNHOXPmVNq0adWgQQONHj3aCgC9e/dWlSpVrBaJHTt2WOMt4+LBgwcKDAzU5MmTtXPnTn3wwQdKly6d2rdvr7Fjx+revXv6+++/NWDAADkcDrVq1UoLFiywPk923oTu3btX3t7eLj0c7t27p8WLFytv3rwuXYXjE7j/+OMPrV69Wnv27HGZZLBTp07KmTOnXn75ZY0aNUrNmjVTgQIFXF6rcz+P/q3/LV26Fi1apKJFiypTpkzq1KmTy1AFZ/Du1KmTy9qisf3cR53U7+DBgwoICFD58uV17do1vfnmmypRooQmTJig8+fP6+bNmxoyZIjy58+foCEazjJv3rypzz//XCVKlHBZT37EiBFKkiSJJk2apKNHj+rWrVsaPHiwfHx84t2DYteuXSpTpozatGmjCxcuxPvc8+j7+uDBA40fP17lypXTN998o6CgIIWFhalevXrq3r27Hjx4oEuXLilPnjxyOBwuywU+rYz9+/crXbp0GjZsmE6dOuVyzJMmTZLD4dDYsWOjzdi9ePHiePeCelKLYK1atZQsWTK9/vrrCZol3Pl9jdrtPSgoSHfu3NHevXvl7+8vPz8/K3iHhoZqzJgxypgxo9UT7EXx6Odl/fr1yp07t8uNfFhYmN544w0VLVrUCr9btmxJUA+8qOV+8cUXcjgcSpkyZbRW882bN8vhcFhjpZ+0rz179mjt2rUuk6stXbpUZcuWVcuWLaNNuhZTd/PH7Ts8PNwlDH7//fcqWbKkunfvHq3i4ZdffolXEHoWPZ82b95sVRw4v1MrVqxQqVKlrGEZ69ev10svvaTq1avHam6JRz9Td+7c0QcffKCAgAD17NkzxuDtHJbm9H8peO/Zs0epUqXS0KFDdfv2ba1bt05eXl5q2LChVXGzefNm5cyZ0xpuMWLE/2vvPOOiutIwfi6CIEUnFAtgIfQqIkhHFBAMCkiJGmBRg0YIrlKMCGKJLRCJsSQ2jBVd0bjRDbKaTQxRRNG1ZFUQSCIBBBEFQcShPfuB372ZC5oAMyij5/8lcWaYe+fOnXPOc97yJCE4OLjL2WJd5VU4JEgDVHRLOTk5ObCzs4OnpyfPHgZoX3wFBwdLtGna1q1bERISgvXr1/MiMR1FsZubG0+IXb58GXJycli5ciVaWlqwY8cOqKur48MPP+ReExAQAHV1daxbtw4pKSmYN28eVFRUuj1psAude/fucaJINHWUXQAtWbIEgYGB3HOLFy/G22+/DR8fn25Hz14FkhRa7DVja+aTk5ORmJiIlJQUREVFwdjYGP/6179w5swZjBw5kqurbm5uRn5+fo8mtlOnTkFFRYWzX2lsbOTqwseOHYvk5GScOnUK0dHRUFZW5tL3xKnp/zMyMzPx1VdfoaSkBBoaGp02siorKzF8+PBO6d5/RcdNJENDQ6irq8PFxQXh4eHcgo1NNR80aBDGjRuHnTt3coK7K9dXWlO6RCOdw4cPx2effYa0tDS4urpi4sSJvOjFwYMHYWZmhvfff7/L94Ho5C8q5mJjY8EwDJycnFBbW4v4+HhYWFhw9Y8aGhoSSSlmP19dXR0nvGfNmsU9v3z5cqipqUFbWxuWlpYYMmSI2MfNy8uDi4tLj8UMe84do8s1NTUwMzODr68vgPZNp9GjR3MbUfX19Zg3bx4yMjL+0muX5eHDh3BycuJtwgL8jbVNmzZxPUAk5SXc2yU6LKWlpfDz88OpU6e46DzbmOvmzZuwsLDoJLyXLVuGESNGoLq6WmqyVtjz/P7773H16lWcOnUKI0aM4DZF2N+eUCiEgoICL7NJkuzevRsMwyA2NpY3j1dUVMDQ0LCT9V9HMjIyoK6ujqFDh8LY2JiXnXL06FHY2NggJCSEZzH2V98R+/y///1vBAQEwN3dHf7+/lwmHutIMWvWrE7e2d3hVWU+1dbWYurUqZ1E/r59+6Crq8s9lpSUhPj4+C4JsheNXY2NjVxDvI7Ce8aMGXB2duZFdt8Ufv/9d6irqyMoKIj3uI2NDQwMDLjNw7q6Ovj5+cHAwAD6+vp46623xG62S+k6VHRLCeyg+d///hcZGRnYsmULFwnJycmBg4MD/Pz8OnV8lmS95bp166CqqooZM2ZAR0cHHh4ePI/ox48fIysrC15eXjA3N+cm2ba2NmRnZ/MWVbW1tc8V3h9++CEmTJiAMWPGIDQ0tMdpkcXFxUhKSgLQPhgrKCjwmpIAwLvvvgt/f3/u3wsWLMDGjRvx4MGDHh3zVSApodVx0+T06dMYP348t0DZsWMHhgwZgpSUFNja2kJVVbVTymVPhHdkZCSvYZ6JiQn8/PwQGxsLLy8vMAyDTz75BCEhIRAIBH+5YOopFy9ehEAgwIEDB1BVVYUpU6YgMDCQd11bW1vh7Ozc44ZG69evx9ChQ5GdnY22tjZ8+OGHUFRUhL+/Pyckbt26BW9vb8TFxXG/+a5eV2lJ6XpeU66bN29i1apVPH/y/Px8BAQEwNXVlSe8//GPf3TZvq+srAxBQUGdPNGTk5OhpqaGtLQ0WFpawtbWFjU1NSgrK8OePXtw/PhxiW5WstTW1mLLli0wNzfn1XhfuHAB//znP3H48GGJpfiJG2koLi6Guro6fH19cf/+fS5ScunSJSgoKGDDhg1oaGiAgoIC1q5di9LSUiQkJMDY2LhbUZNbt25BV1cX2dnZnVLRW1tbueu4efNm9OvXD4mJiRIT3r0ZEWT7TBQUFGDChAkYPXo05OXlefcy8Hzhff/+/W65ZfQVsrOzwTAMvv32Wzx69Aja2tp49913ea958OABrKysuuXN/DzY++LXX3/F1atXuS75wB+bNIsWLUJeXh7KysoQHx8PVVVVrpmbqM8z+9+HDx/Czc0N+/btQ0FBATZv3gxzc3NeP4+vv/4a+vr6CA8P79Zv7MSJE1BSUsJHH32EY8eOwcTEBPr6+lwpTXp6OmxtbREQECB2OcjLynwSHePOnTuHgIAAGBoaciKO7f1gYmICa2trCASCLgm8TZs2YcSIEWhqasKePXsQGxvLe/7p06dITU2FsbExIiMjuQ3Yq1evIjAwEFOnThWryak08ttvv8HGxgY+Pj5cxum6devAMAzn+hMWFoZDhw7h7Nmz2Lt3L9LS0sRuDknpHlR0SxGsl6y9vT3s7e2hrKzMdVXOzs6Go6MjAgMDxZ7MWDougCIiIjjRk5eXh6CgIDg7O3PncOHCBbz//vvw9fXlohTPSwNmB+rHjx9zwjsqKop7vqamBo2NjWJtGCxbtgxvv/02gPaaz4CAAAgEAi5aKhQKsXTpUri4uCAuLg5RUVEQCARdXsz3FSQhtPLy8sAwDOLi4nipmsuWLcPQoUO5HeeLFy/i73//O1xdXcEwDBYuXCju6SMtLQ2Ojo549OgRxowZA0dHR25BXVpayvl7PnnyBL6+vtDS0uLqAyXFr7/+inXr1iExMZF7LDs7G2ZmZvDz80NaWhquXbuG2NhYqKqq9qixXmFhIZycnDjf1NOnT0NJSQl/+9vfYGxsjHfffZeLeIs2Heyun6i0pHSxYpjNznFwcICKigpmzJjBe92tW7fg7+8Pd3f3Hm12/PLLL7C3t8c777zDLUTWr18PVVVVrqbw9u3bsLCwgJWVVY/qPZ8HO8adP38eycnJWLJkCXe8xsZGbN26Febm5ryId1+jsLAQAoEADMNg0qRJ+PzzzzkxEB0dDSsrK+Tn5yMtLQ0Mw3A9GrobpU9PT4esrCwv/b8jDQ0NqKysRFpaGgQCgdiCtLcjgvv374e/vz8n8A4cOIB+/fpxGUMduXnzJqysrKCtrd2lVOW+SHFxMU6cOMFrSJqTkwNVVVUEBATg8uXLyM/P5+YVcTa1RH2HTU1NoaurC1tbW9jZ2XHXj63xlpOTw/Tp02Fvb88TfB2z2XJzc7luzuw48PTpUxw4cACmpqY84X3ixIlOfSf+jJqaGjg6OuKTTz4B0L7xMGrUKMyfP5/3up07d8LV1VUiNl6SznwS/V2y67qO882FCxfg6+sLAwMDrnHjnTt3kJSUhJUrV3Yp+2X79u2Ql5fnAjoRERGwsrLqZBsJAH5+flBRUUFQUBAnvLOysjBy5Mhe68zel2Edc3x8fBAeHg4NDQ0cPXoUJSUl+Oc//4nVq1dDQ0MDurq6vIAT5eVBRbeUcOXKFairq+Orr74C0D5hsFFAUc9UU1NThISEiOUlC/AHWLZWx9/fn5dud+XKFQQFBcHFxYVrdPbbb7/xUpX/ClHh3TG9sCew1yIrKwvGxsbcQFxVVYWQkBAoKSlxi++ioiLMmTMHdnZ2sLOze+ldnyWFuEKrpqYGmzdv5lKeRbtoh4WFITIykovAPHz4EHl5eYiKipJYXTVr3zN+/PgXip7m5mZUV1dL1FO0ra0NFRUV0NTUhLKycqf776effkJgYCA0NDSgp6cHY2PjLguK5wmHw4cP4969e8jJycGwYcM4ERkaGgoZGRm4uLjwurB3V3BLE6wY9vb2xp07d1BQUABnZ2cYGBjg1KlTvNfevn0b7u7umDp1ao/qa9mFiK+vL+bOnQsNDQ2cPn2a95r8/Hzo6OjA1taWF10Vh2PHjkFZWRnjx4+Hra0tV+dcWVmJxsZGbNmyBWPHju0UCXyVdBy7N23ahOjoaCQmJmL+/PmwsbFBVlYW8vLyYGhoyDVTu3btGv7zn/9wIrM75OTkQEFB4U9TQj///HN4eHgAgMQ2RgDJRwTZ6/fpp5/CysoKs2fPxv3795Gbm4u0tDRMmTIFEydO5GWIsdy4cQMODg5iuWW8KsrLyyEnJ8eVkIly6dIl6OrqYvjw4Rg1ahTnVCIuZ8+ehZKSEtel/OuvvwbDMDxP83379oFhGKSkpPCyL3bu3AkjIyMIhUI0NzdDKBTik08+wciRI6Grq8s7Diu8R48eDTc3tx6d64MHD2BiYoKKigpUVlZCU1MT8+bN454XtYWUVBZHb2Q+idot5ubmwsnJqdP9euHCBUyaNAlGRkZcXX1X57KdO3eif//+3CYY0H79P/zwQ0ycOBHLly/nvdeqVavg7OyM6Ohobsw6dOgQFBUV37hIN8udO3fg4eEBBQUFnr0qS3V1NTIyMmiE+xVBRbeUcPz4cW6ntbCwECNGjOAN2qzw+umnn8SO1oouOGNiYiAQCCAQCNC/f/9OlgJsHU3HWqnuCIbHjx9j165dYBiGl17aVZ53rIKCAgwYMIBX515VVYXQ0FAoKirip59+AtBe39LU1CSxiU6auXPnDmbNmgUdHR3Y29vjypUrSEtLQ1hYGFeD2FGMiCO82fc6cOAAzMzMuJ3xl1HDKHqMY8eOYdiwYbC3t++08cJG2AoKCnq02M/Nze3UyCouLg5z5szhMjnWrFkDDw8PxMbGvtZCuyOFhYWYNGkSPDw8cPv2bRQVFcHR0RFTp07tJIoLCgrEWjyyC5EBAwZgw4YN3OOi1/vOnTvdil6xPO9+LSoqwogRI7Br1y7u+cOHD0NNTQ1xcXEA2lPNk5OT4ezsLFErx54g2vBNlB9//BFeXl44deoUnj59ii1btkAgEOCzzz6Dp6cnBAKB2JuVZWVlGDx4MHx8fHjRT9HrGhsbi8WLF0tsQ0QUSUcE2Sj8oUOHYGNjw3mnA+0bSF5eXpg4cSJPaGVmZoqd3fWy6ZiZsG/fPgwbNoxXU8q+pqGhAZcuXUJubq7ExNCaNWuwaNEiAO1ZUSNGjOCVqrFs27aNK4Viz/XmzZtcVhe70VlRUYHU1FSoqqpyfsYsT58+xa5du2Bvb9/jccjOzg6rVq2Cjo4O5s+fz80L9+7dw4QJE7hNJ0ne35LMfGLtFocOHYqamhp8//33sLa2xsSJEzutOffu3QuGYTBkyJAu16ifPXsWDMNg1apVvMcXLFiA6OhoxMTEwNbWFomJiWhqasKzZ88wc+ZMpKWl8e7FoqKiN15QFhcXY9KkSZg8eTJnGQZItqEvpWdQ0S0lsB0bKyoqMHLkSMybN4+bQI4cOYL58+dLZMIWHfCLi4thbm6Oixcv4tSpU5g1axZ0dXW5aDtLbm4ukpKSxOoSWVtbi7179+LOnTs9+vvffvsNu3fvxq+//oqKigoIhUJYWFhwEXj2c92/fx/vvfceBg0a1KnOk9L+Pfz444+ws7ODrq4uFixYAH19/U6LEElSVlaGYcOG8dISe4Pm5mbuPui4WZCRkQFNTU3Mnz+fl2LfXREs+vobN25wkRfR30ZwcDAcHBy4fwcEBPCiM2+i8J40aRLu3LmD/Px8ODk5YcqUKT2ylPkzXrQQEed6s39bVVWFy5cvcxG8//3vf3j77bdx/fp13pianp4OGRkZ7vj19fWdmpW9KioqKjB8+HCugzjL6tWroa6uzkWxz507hzlz5sDb2xsMw2Dq1KloaWkRSyx8/fXXkJeXR2hoKG7dusU93tDQgKVLl2LkyJE9nhv+CklGBBsaGmBrawt7e3sA7YLexsYGYWFh3PXLz8/H5MmT4e7ujuTkZCxfvhwMw0islv9lIFo+sXv3blRVVaGtrQ3p6elQUFDgda7vrYV+aGgooqKiUFFRAW1tbcybN487ryNHjrzQo1k0G+PChQvQ1NTkyiYePHiAlJQUmJmZdSqfamxs7PLmvOiYwm4UJSYmQk1NDe7u7rzXLl26FBYWFj1yaHnZsHaLY8aMQU1NDX744QeMHz8eLi4uvIh3bm4uPD098cEHH3TZSq2wsBDOzs7w8fHh3Cn8/f2hr6+Px48fo66uDomJiTA3N4eWlhasra1hbGzMza1v0rzZFdgML09PTy67k/LqoaK7j/GincmCggI4OTlBWVmZs5xhB5nY2Fj4+vqKZW3SkQ0bNmDmzJm8iSc/Px9RUVEwNDTsJLxZxBHePVm0tbW1QSgUYsqUKdDU1IS2tjbU1dXx3nvvgWEY+Pn5oaioiBdBEQqFmD59OoYNGybx+uDXiYSEBPj4+HB1naIpX5Jm8+bNUFNT4y24JUVH65gzZ84gPDwcc+fOxWeffcZtVqWnp0NbWxsRERE9siESvX9TUlKwbt06yMnJoX///khNTeV+G3v37oWVlRXGjh0LW1tbGBsbc5sA0tKpWJI8T3i7urrC2dlZ4htjklyIdPSX9vLygr+/P1paWji3BtaeSLTTupmZGS/a3leoqanBqlWrMGjQIEycOBEbN27kngsLC0NYWBg3x1RWVuKHH36At7d3p99XT2htbcX27dshKysLIyMjzJ49GxEREfDx8cHgwYMl0kX+z5BURLC5uRknTpyAqakpJk+eDKBdeI8bN44nvAsKChAcHAwbGxuYmJhIJN36ZXPs2DEMHDgQK1eu5O6B5uZmHDx4EPLy8rzmV70xrm3fvh3e3t7Q0tJCeHg4dxyhUIj58+cjLi6u0/f67Nkz2NnZYeTIkWhra0NJSQkcHR2ho6PDRcPv37+PlJQUmJqaIiYmpsvnU1JSgk2bNnH/7igCi4uL4e3tjXHjxiE+Ph5paWkIDw/HoEGD+nxpW0e7RXZjiY14u7q6wtHREUVFRWhpacHy5cvx/vvvc2VpXYUdn729veHk5AQrKyteFP3Jkyc4d+4cVqxYgeTk5G65e7yJFBYWYsqUKbCzs+OyFSmvFiq6+xAv6rQLtKdBL1q0CPr6+li3bh0A4O7du0hISICamppErE1Y6uvrERsbC2VlZW7hwMIKbxMTE1507lXDDu5Xr17FoUOHkJKSAhMTEzAMA21tbQwdOhRubm6YNWsWtmzZgjNnzojlv/s6I7pYuHTpEpKSkmBnZ9er3tjFxcX429/+JvHd6qNHj2L06NGcPQ2bwhYcHAwXFxeYmprC3NycSzE8dOgQRo0ahdDQ0B6nqK1cuRLq6uo4ceIE0tPTERcXBxkZGaSkpABoXzjs27cPCxYsQExMDF04gC+8CwsLcfPmTXh5efVK9EcSC5EX+UuL3r9BQUEwMTHhRYCEQiHGjh2LnTt3ivchepFbt24hMDAQenp6cHV1RUFBATIyMhAWFtYp+0DSYurSpUsIDAyEpaUlnJ2dsWTJEqlJFRWth8/KyoKhoeGfCu+HDx+isrJSarqUi37Xly9fhrq6Onbu3NlpzGaFt5KSEs82VNzj3r17F2VlZZy7SEFBAYyMjKCpqcmVJjU0NCAhIQGamprP3Thta2vDuXPnYGZmBhsbGwDtzh0eHh4YPnw4T3hv2LABmpqaXSp5a2lpwZIlS2BgYMCN88Af9wT7GW7fvo2EhASYmprC2tpaIp3Ke4PnOUw8z25x3LhxqKmpQXZ2Ntzd3cEwDGxsbKCkpNTjzbjCwkK4u7tj0KBBvBKMF82Pb/K82RXy8/MRGBgoVZk0rzNUdPchRJsLiUZh2EGlqqoKc+bMgZGREZSUlGBtbQ1dXV2xowAdbTOA9gluxYoVYBgGX375Je/1BQUFCAkJwcyZM/tMZO5555GSkoKQkBBcu3YNZ86cQUJCAjw9PWFvby81C7lXxYu+194U3t21yOoKv//+O6ZMmYLx48dj9+7diIyMxGeffcYd59KlS7C2toaFhQUX8Wa71Xal9rBjLVtdXR3s7Ow6RTJTU1MhIyOD1NTU575Pb15XaaGwsBDvvPMOxo0bh6Kiol6tP5PEQuRF/tLsgvX8+fPw8vKCoaEhvv/+e2RnZyMxMRHq6up9vlnWw4cP8e2332LMmDF4++23ER8fj7Fjx/L6iPQW0rKIZr9n0ftUVHifOnWKJ7z37dsHW1tbzJkzp8/b+oly7ty5TuPTl19+CScnJ16mWEfxvWvXLgwePFgim9vHjx/H0KFDYWRkBDMzM67+/ueff8bQoUMxbtw4mJmZYcqUKTyf++dt4ra2tiI3NxcGBgac8C4pKekkvCsqKrB58+Yu/1bLysqwcOFC2Nracl3K2eOJzqetra3c9RTNgOlrdMVu0crKiks1FwqF2L17N7Zv397llPIXUVxcDE9Pz06lQKI2b5SuI029Il53qOjuY7wo/ZGd2Ovr61FVVYXk5GTcunVL7G7OopPSkydPeJMA67uqrKyM7du38/7u7t27nXZx+xoZGRkQCASdOuqKdoimdJ2++j2/CPb+LC8vh6+vL+cff/LkSe41LS0tuHDhAszMzHiWVF1Ji/Px8eF5LQPtTZQ0NTW51Ny2tja0trZCKBRi6tSpkJGRwZYtW7jnpO2a9jb5+fnw9/d/Kbvy4i5E/sxfmiUvLw/BwcGQl5eHnp4eTE1Nez1VWtIsWrQIXl5e0NLSAsMw2LVrV68eT/Q30dd/H3fv3sWiRYt4zaI6RryNjY0RGhoKANixYwdMTEwQGRkpFZsL+/fvx8SJEztF45OSkmBtbc39W/R7ys3N5aLRkmhQWlJSAj09PWzbtg3p6el47733IC8vzzVbLCoqwp49exAdHY09e/ZwIpn9HioqKjpltDQ1NXFd1TsKbx0dHS763N3Mq4qKCkRFRT1XeAPtY87HH3/Mraf68v3dVbtFS0tLWFpaStRVAPhjLezl5UVrkimvDVR090FeJLxbWlogFAqxZMkSBAYGir1oFJ1QNm7ciEmTJsHd3Z3XNKu0tBSJiYkYOHDgc1Mi+2rzira2NuTn52P48OHcriu7yOnLEx1FsrDfeWlpKfz9/cEwDNfxluXZs2ewsrLqdg1idXU1t0nFLjIBIDIyEmZmZlw2BfteixYtwvjx48EwDL755hvxPthrjLTsyv+ZvzR73zU0NCA/Px8PHjxASUkJ7z7p64j+Bs6ePYslS5ZARUWlS167bwo///wz141atMRLND133759MDEx4YTf9u3bxXYY6W3Y86+rq+M29ktKSrgIbUZGBhiG4TmWAO2/3ejoaBw+fFiseVb0bysqKrB48WLu39XV1QgPD4e8vDzOnDnzp+/z+++/Q01NDQzDwNXVFUuXLsX333/PbQbk5eVh9OjRsLKyAtC+icJGzYVCYY8+g6jwFm0O+vTpU0RGRkJOTo6Lpvd1XpXdoujxvb29YW1t3eUu6BRKX4aK7j7K84S3UChEVFQUZGRkJBotiY+Px9ChQ7F+/Xps27YN6urq8PX15SbY0tJSJCUlSaVYMDQ07PXIDKXv8byJv7y8HIGBgbCwsOh0T0yePBlxcXFdjj6LppRu2rQJ5ubmXA3bjz/+CDc3N0ybNo2zoGpsbISvry8yMzMxd+5c2NjYoLa2lm4ASTFd8ZfevHkzPDw8+nQa6Z/R8f6k1oqduXbtGqysrBAeHs4T3uzGS21tLQYPHsxrTNeXYQV3cXExvv32WwDtEc2xY8ciNTWVG/tmzpyJgQMH4rvvvkNjYyNqamqQkJCAwYMHi1U+wd5zWVlZmD9/PqZOnQoXFxeez3Z1dTXef/99KCsrIysr64XvdffuXVhaWsLQ0BDW1tYICwuDgoICLC0tERoaiiNHjiAjIwP6+vqcD3xJSYnYmTYdI96tra2Ijo6GkpKS1DXN6027xa5w+/ZtxMTE9NkAD4XSHajo7sOICu+zZ8/io48+woABA8QW3KILwG+++QYmJia4cOECAODEiRNQUlKCoqIinJycOOF99+5d7NixQ2pqT9mJ29LSEgkJCa/4bCgvE/a7v3DhAjZu3IilS5dyEZnKykr4+fnB1NQUERER2L9/PxYvXgx5efkuRx+ys7OxYcMGpKamoqGhAffu3cPgwYPh4uLCRbczMjLg5uYGVVVVeHt7w8TEBGZmZgCAjz/+GLa2tlRwSzld9ZeOj4+n3/VrztWrVznhLerA0NzcjPr6enh6enLuD9JwL5SXl0NdXR0mJiY4cuQIhEIhZsyYAQcHB3zxxRdobW1FeXk5wsPDwTAMjI2NMWbMGGhqakokIPCf//wHioqK8PLywoQJE9CvXz8cPHiQ95qHDx9ixowZGDJkCBoaGl74XkVFRZg2bRp8fX1x8eJFlJSU4PDhw3B0dMS4ceOgqKgIc3NzMAzD8xgXF1Z4Ozg4wMzMDAMGDJA6wc3SG3aLPYEKb4q0Q0V3H4fttPvWW2+hf//+Yg/ap0+fRkpKCteI5OjRo1i7di0AIDMzE6qqqvjiiy/www8/QE5ODn5+fp0aGkmL8AbaG770xe6gFMnSMcX32LFj0NDQgJeXF2bOnAmGYfDxxx8D+CPiLSsri9GjRyMuLq7Lgnvfvn0wMDDAokWLeDXgDx8+xKhRo2BnZ8eVMxQVFWHLli2IiIjAihUruLTpuXPnIjAwEE+fPpWKBTjlxbxKf2lK34IV3rNnz+aEZ1NTE1asWAEdHR2p6h589uxZyMjIwMbGBt7e3jh58iSEQiFmz54Na2trbNu2jYvkZ2VlYceOHThw4ABv86mn3L9/H6tWrcIXX3wBoP23FB0dDQUFBV43awB49OgR7t2795fvWVBQAE9PT3h4eCAvL497vKamBvv370dCQgLGjBkj8X4LFRUVmD17NvT19fu8LdhfQX2fKRTxoaJbCigoKICPj4/YtmBfffUVtLS0EBERwYluoD2d6vHjx7Czs8Pq1asBAPfu3YOhoSEYhsHcuXPFOu6rhIqa1xtWZItmb9y6dQva2tpcD4L6+nowDIPExERuoVhRUQE3NzfMmDEDjx496tKx9u/fjwEDBuDYsWO84yUnJyM3Nxe1tbWc8H6eXU1VVRWio6MhEAgkavFHeXW8an9pSt/i+vXrcHZ2homJCaZNm4bAwEBoa2vj2rVrr/rUus2cOXNgaWmJgIAAuLi44Ntvv+UJ761bt4rtMJCWlsZ52be2tqKgoAAyMjIYPnw4du/ezXttdHQ05OXl/7Sc488oLCyEp6cnPD098eOPP3Z6vreCCVVVVaisrOyV937ZUN9nCkU8qOiWEsSd3A4fPgxFRUUcOXLkuXV5v/zyC7S1tblFYkVFBUJDQ3H58mWp6LJKefNgBXdhYSEmT57MeTrn5ORg4sSJANqjzVpaWjyrIzbiVFpa2mUf6Nu3b8Pc3LxTF/+goCAwDAM3Nzfk5eWhtrYWOjo6cHZ25i2079+/j5UrV8LBwUEqF+CUP0ea/aUpkqWkpASff/45AgICsGbNmj6f6dAxZZfdUMzMzMSsWbNw+vRp+Pv7w8HBAZmZmRAKhZgzZw4cHBzw6aef9mh90NbWhvLyclhZWXWqBV62bBkYhkFMTEwnF4m4uDixesuIRmtzcnJ69B5vOtT3mULpOVR0vwFUVVXB1dUVW7du5T1eX1+PS5cuIS8vD48ePYKZmRn8/PyQnZ0Nd3d3uLm5cRMyFd6UvgR7X964cQMCgQAMw3DdTU+cOAE9PT1cv34dOjo6mDdvHvf67777Dn5+fl1KSRTl9OnTGDVqFPLz87n3ioyMhJ6eHjIzM+Hu7o5Jkybh4sWLqK2thZycHCIjI3nvUVZWJlXdqyndg46RFGmDHct+//13HD9+nPdcVVUVjIyMsHXrVlRVVcHf3x9OTk6c8A4KCoKbm1uXM4VEYTPQGhsbAQCXL19GdnY29/yyZcsgIyOD7du3d7L4TEhIEKuDPo3Wio+0OExQKH0NKrrfAKqqqmBiYsI1cgHaa50DAwPBMAyGDRsGZ2dnfP311zA2Noa+vj6cnZ256DptXkHpS7D347Vr1zBgwABERETAwsKCu78rKyvh5eUFRUVFBAcHA/hjkbdkyRK4u7t38p39K9asWQM1NTXeY/fu3UNpaSmA9ki4o6MjbGxs0NbWhocPH1KLujcMafKXplBYRG213nnnHRw5coSLzp88eRLOzs6oqqrC7du34e/vD1dXVxw/fhxNTU3d3rxkEXWJaGpqgqGhIdzc3HhNuuLj4yErK4tt27Z1Et7iQqO1FArlVSBLKG8EdXV1JDMzkwwcOJB8+eWXpLCwkDg5OZHTp0+Tx48fk2XLlpH8/Hxy8eJFUl5eTgwNDYmMjAxpaWkhsrL0NqH0Ddra2oiMjAy5ceMGcXBwIDExMWTNmjVES0uLlJWVEUIIGTJkCPHy8iJ3794lSkpK5O7du+Tx48fk8OHDZMeOHeTcuXNETU2tW8fV09MjjY2N5LvvviMeHh6EEEKGDRvGnZOxsTHx8fEh2dnZpK6ujqiqqhJCCGltbSX9+vWT4BWg9FUYhnnu/1MofZm2tjaio6NDDAwMSGVlJfnuu+/IRx99RBISEohAICCDBg0iV65cIZMnTyarV68mCxcuJLt27SKTJk3ixsDuwv4+jhw5QpSUlMg333xDgoKCyIYNGwgA4uzsTNavX08IISQmJoY8e/aMzJs3jygqKkrkMxsZGZH09HTSv39/ibwfhUKhdAWqpt4ANDQ0yN69e0lAQAD54YcfiIqKCvn888/J6NGjiZqaGqmpqSFr1qwhQqGQDBw4kAwcOJAQ0j4ZU8FN6UvIyMiQq1evEldXVxIdHU3WrFlDCCFkxIgRpKamhnvdwoULSV1dHfn3v/9N9PT0iKmpKWEYhpw9e5aYmZl1+7g2NjZEVlaW7NixgxgYGJCRI0fyzqm+vp6cO3eOGBoakkGDBnHPUcFNoVD6MiNHjiSHDh0i8fHxpK2tjbzzzjvE29ubbNq0iQgEApKZmUkePHhA3NzciImJCdm6dStRUlIiSkpK3T4WAE5w37x5k3zwwQdk5cqVZMqUKeTgwYNk+vTpJDU1lRBCOOHd0NBA1q5dS2bNmiUx0U0IoYKbQqG8dBgAeNUnQXk5PHjwgDx58oTo6OjwHq+pqSG+vr4kJCSEzJs3jzcxUih9iUePHhEDAwMSFhbGLc4IIWTatGlESUmJHDx4kDQ1NXELqrq6OlJUVEQGDhxIBAIB0dDQ6PGxDx8+TGbPnk0CAgLI4sWLiaWlJSGEkJKSEjJ37lxSVVVFrly5QmRlZelviEKhSBV37twh0dHRpLW1lWzZsoVoaWmR//3vf2Tt2rVk+vTpJCQkpEfjGpudJMrNmzfJ0aNHybNnz0hycjKXUXfjxg0yffp0YmRkROLi4oiTkxMhpH3tIs7YTaFQKH0BKrrfcB48eEBmz55NqqurSU5ODo3MUfo0TU1N5MaNG8TGxoYQ8kf69pw5c8j9+/dJZmYmIeSPhV5qaipxcHAg9vb2Yh+7tbWV7Nmzh0RGRpIhQ4YQMzMz0tLSQurr6wkhhJw7d47IycnRlHIKhSKVFBUVkaioKEIIIcuXLyeOjo5ivR87DpeXl5Pz58+T1tZWoqKiQv7xj3+Q06dPk4CAALJjxw7S1tbGZdbduHGDhISEEHV1dbJu3Tpib29PNzEpFMprARXdbyjV1dUkLS2NnD9/nlRVVZGcnBwqGChSB3u/btiwgfzrX/8i2dnZ3AJtxYoVZM2aNeT69evE3NxcYse8fv06SUtLI4WFhWTEiBHEysqKfPDBB6Rfv360BwKFQpFqioqKyN///ncCgCxbtoyLNncXVnD//PPPZNq0aURBQYEUFRURCwsLoqWlRZqbm8nNmzfJyZMniaWlJQFA2traSL9+/ch///tfEhERQY4fP060tbUl/AkpFArl1UBF9xvK9evXSVJSEtHV1SUbNmwgsrKyVDBQpJa9e/eS+Ph4kp+fT9566y2yYsUKkpKSQs6fP0/Gjh37Us6BblhRKJTXgaKiIhITE0Oqq6vJxo0biZ2dXbf+XlRw29vbk6ioKLJw4UJy5coV8uWXX5L6+nri5+dHTp48SVRVVcnq1auJhYUFAUBaW1uJrKwsEQqFRF5evpc+IYVCobx8qOh+g6mtrSWDBg0iDMNQwUCRarKyssisWbNIeXk5+eSTT8jatWt7VXDTdEcKhfI6U1BQQJKSkkhqaioZMWJEt/++tLSUWFlZkQkTJpCMjAzu8e3bt5OlS5eSGzdukKtXr5KtW7cSZWVlsnr1amJubs6NrXSMpVAorxsyf/0SyuuKQCDgJjcquCnSjKmpKXnrrbdIYGAgWb16da9HuOlikEKhvM6wtlo9EdyEtGf+6OjoEKFQSM6fP889rqurSxiGIQ0NDcTPz4/MnTuXNDY2koULF5Jbt25xYysdYykUyusGFd0UOrlRpB6GYUhhYSHJysoieXl5Ly2lnEKhUF5XxLHVGjVqFElPTydNTU1k9erVJD8/nzx58oQEBweTuXPnEmNjY0IIIdOnTyfBwcFERUWFZ7dIoVAorxs0vZxCoUg9ra2tZP369SQwMJAYGRm96tOhUCgUCmmvD1+4cCF5+vQp+fnnn0lYWBjZuHEjIYSQ5uZmIicnRwghpL6+nqioqLzKU6VQKJRehYpuCoXyWkD7ElAoFErfo6ioiMyfP5/88ssvZP/+/cTFxYUQ0t4bgxCabUehUN4MqOimUCgUCoVCofQaxcXFZMGCBQQASUpKEtsDnEKhUKQNWtNNoVAoFAqFQuk19PT0yObNm4mcnByJi4sjFy9efNWnRKFQKC8VKropFAqFQqFQKL2Kvr4++fTTT4m2tjbR1NR81adDoVAoLxWaXk6hUCgUCoVCeSk0NTWJ1RmdQqFQpBEquikUCoVCoVAoFAqFQuklaHo5hUKhUCgUCoVCoVAovQQV3RQKhUKhUCgUCoVCofQSVHRTKBQKhUKhUCgUCoXSS1DRTaFQKBQKhUKhUCgUSi9BRTeFQqFQKBQKhUKhUCi9BBXdFAqFQqFQKBQKhUKh9BJUdFMoFAqFQqFQKBQKhdJLUNFNoVAoFAqFQqFQKBRKL0FFN4VCoVAoFAqFQqFQKL3E/wFkTXjP5KRWQwAAAABJRU5ErkJggg==",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.ylim(3.5, 5)\n",
        "plt.bar(df['Brand'], df['Rating'])\n",
        "\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "id": "jsi9q9hvcpqg"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "authorship_tag": "ABX9TyNF6kY7d5h4+v/8IyCKCVAu",
      "include_colab_link": true,
      "mount_file_id": "1Z7x1FXNdhbwc2W-_RGYnfSYNg7h12zzw",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.0rc2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
